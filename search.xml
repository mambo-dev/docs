<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>스프링 프레임워크는 어떻게 요청 데이터를 바인딩할까?</title>
    <url>/docs/how-does-springframework-bind-request-data/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>스프링 프레임워크 이야기는 스프링 애플리케이션 개발자들이 궁금해할만한 내용에 대하여 잠만보가 찾아보고 정리하는 글입니다.</p>
<p>스프링 프레임워크의 컨트롤러 컴포넌트를 작성할 때 핸들러 함수에서 사용하는 모델 오브젝트에 대해 <code>@ModelAttribute</code>와 <code>@RequestBody</code>를 선언하여 사용하시나요? 그렇다면 @ModelAttribute와 @RequestBody를 어느 상황에서 사용해야하는지 알고 계신가요? 만약, 이 질문에 대답을 못하였다면 이 글을 읽는 것이 도움이 될 수 있습니다.</p>
<h2 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h2><p>오늘의 주제는 데이터 바인딩입니다. 데이터 바인딩이란 제공받은 데이터를 내가 보유한 객체에 주입하는 것을 말합니다. 스프링 프레임워크에서 데이터 바인딩은 <a href="https://www.oracle.com/java/technologies/javase/javabeans-spec.html"><code>JavaBeans Specification</code></a>를 기반으로 데이터를 자바 빈 오브젝트에 넣을 수 있는 기능을 제공합니다.</p>
<p>스프링 프레임워크의 <code>spring-beans</code> 모듈에 포함되어있는 <code>BeanWrapper</code> 인터페이스는 자바 빈 스펙을 기초로하여 오브젝트의 내부 프로퍼티를 설정할 수 있는 기능을 제공합니다. 다만, 이 BeanWrapper는 애플리케이션 코드에서 직접적으로 사용하지않으며 <code>DataBinder</code> 또는 <code>BeanFactory</code>에 의해 사용됩니다.</p>
<h3 id="Setting-and-Getting-Basic-and-Nested-Properties"><a href="#Setting-and-Getting-Basic-and-Nested-Properties" class="headerlink" title="Setting and Getting Basic and Nested Properties"></a>Setting and Getting Basic and Nested Properties</h3><p>BeanWrapper를 통해 프로퍼티를 설정하고 가져올때 <code>setPropertyValue</code>와 <code>getPropertyValue</code>를 사용하게 됩니다. 그리고 스프링 공식 레퍼런스에서는 다음과 같은 프로퍼티를 가져오고 설정하는 규칙에 대해서 설명합니다.</p>
<p><img data-src="/images/posts/spring-story-001.png"></p>
<h3 id="Binding-Annotations"><a href="#Binding-Annotations" class="headerlink" title="Binding Annotations"></a>Binding Annotations</h3><p>스프링 프레임워크에는 데이터 바인딩을 위한 여러가지 어노테이션이 있습니다. 스프링 웹 애플리케이션 개발자는 웹 요청을 처리할 컨트롤러 핸들러 함수를 작성할 때 <code>@RequestParam</code> 또는 <code>@ModelAttribute</code>, <code>@PathVariable</code>, <code>@RequestBody</code>와 같은 어노테이션을 주로 사용합니다.</p>
<p>컨트롤러 핸들러 함수 파라미터에 위와 같은 바인딩 어노테이션이 선언되면 RequestMappingHandlerAdapter에 등록된 HandlerMethodArgumentResolver 구현체에 의해 데이터 바인딩을 수행합니다.</p>
<ul>
<li>ServletRequestMethodArgumentResolver</li>
<li>ServletModelAttributeMethodProcessor</li>
<li>RequestParamMethodArgumentResolver</li>
<li>PathVariableMethodArgumentResolver</li>
<li>ServletCookieValueMethodArgumentResolver</li>
<li>RequestResponseBodyMethodProcessor</li>
</ul>
<h3 id="ModelAttribute-vs-RequestBody"><a href="#ModelAttribute-vs-RequestBody" class="headerlink" title="@ModelAttribute vs @RequestBody"></a>@ModelAttribute vs @RequestBody</h3><p>이번 데이터 바인딩에 대한 주 비교 대상은 @ModelAttribute와 @RequestBody가 선언된 파라미터에 대해 데이터 바인딩을 시도하는 <code>ServletModelAttributeMethodProcessor</code>와 <code>RequestResponseBodyMethodProcessor</code>입니다.</p>
<p>가끔씩 스프링 웹 애플리케이션 개발자들이 이러한 질문을 하곤 합니다. </p>
<blockquote>
<p>@ModelAttribute를 선언했는데 핸들러 함수 파라미터에 값이 <code>null</code>이에요.</p>
</blockquote>
<p>@ModelAttribute를 선언했지만 바인딩된 데이터가 없다는 뜻인데 왜 이러한 결과가 나타나는 걸까요? 이 이유를 찾기 위해 @ModelAttribute가 선언된 파라미터에 대한 데이터 바인딩을 담당하는 ServletModelAttributeMethodProcessor에 대하여 살펴보도록 하죠.</p>
<p>스프링 프레임워크가 제공하는 API 문서를 보면 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ServletModelAttributeMethodProcessor.html"><code>ServletModelAttributeMethodProcessor</code></a>에 대해서 다음과 같이 설명하고 있습니다.</p>
<blockquote>
<p>A Servlet-specific ModelAttributeMethodProcessor that applies data binding through a WebDataBinder of type ServletRequestDataBinder.<br>Also adds a fall-back strategy to instantiate the model attribute from a URI template variable or from a request parameter if the name matches the model attribute name and there is an appropriate type conversion strategy.</p>
</blockquote>
<p>ServletRequestDataBinder 유형의 WebDataBinder를 통해서 데이터 바인딩을 적용한다고 합니다. 그리고 두번째 문장을 통해 URI 템플릿 변수와 요청 파라미터에 대해 특정 전략으로 수행한다는 것을 알 수 있습니다. </p>
<p>다시 정리해보면 <code>@ModelAttribute</code>가 선언된 매개변수는 <code>URI 템플릿 변수</code> 또는 <code>요청 파라미터(Request Parameter)</code>에 있는 데이터를 바인딩할 수 있다고 이해할 수 있겠네요.</p>
<p>해당 질문에서 다음과 같이 웹 요청을 시도하고 있다고 했습니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP Method: POST</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Data: Request Body</span><br></pre></td></tr></table></figure>

<p>POST 요청이고 데이터는 요청 바디에 있으면서 데이터 유형은 JSON 형식이네요. 눈치가 빠르신분들은 바로 알아차렸을 겁니다. </p>
<blockquote>
<p>데이터는 요청 바디에 포함하여 전송된다…</p>
</blockquote>
<p>앞서 @ModelAttribute가 선언된 매개변수는 요청 파라미터에 있는 데이터를 바인딩하는 것입니다. 그런데 질문했던 개발자는 데이터를 요청 바디에 포함하여 웹 요청을 하고 있었습니다. 그리고 답변을 달았던 다른 개발자는 이유를 설명하지 않고 @ModelAttribute 를 <code>@RequestBody</code>로 바꾸라고 하였습니다.</p>
<p>우선 첫번째 질문에 대한 원인은 알았으니 @RequestBody가 선언된 매개변수에 대한 데이터 바인딩은 어떻게 수행하는지 알아보도록 합시다. <code>@RequestBody</code>가 선언된 매개변수는 <code>RequestResponseBodyMethodProcessor</code>가 데이터 바인딩을 담당합니다. <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.html"><code>RequestResponseBodyMethodProcessor</code></a>에 대해서는 다음과 같이 설명합니다.</p>
<blockquote>
<p>Resolves method arguments annotated with @RequestBody and handles return values from methods annotated with @ResponseBody by reading and writing to the body of the request or response with an HttpMessageConverter.</p>
</blockquote>
<p>위 문장에서 @RequestBody에 대한 부분만 정리하면 <code>@RequestBody</code>가 선언된 매개변수는 <code>HttpMessageConverter</code>에 의해 요청 바디를 읽는다고 할 수 있습니다. 그리고 application/json 유형의 요청 바디를 변환할 수 있는 HttpMessageConverter는 다음과 같습니다.</p>
<ul>
<li>MappingJackson2HttpMessageConverter - <code>jackson-databind</code></li>
<li>GsonHttpMessageConverter - <code>gson</code></li>
</ul>
<h3 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h3><p>브라우저에서는 폼 데이터를 전송할 때 POST를 사용합니다. <a href="https://developer.mozilla.org/ko/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data">HTML 폼 데이터를 전송하는 방식</a>을 찾아보면 <code>application/x-www-form-urlencoded</code> 형식의 데이터를 요청 바디에 포함하여 전송되는 것을 확인할 수 있습니다. </p>
<p>그러나 브라우저가 아닌 웹 요청 클라이언트는 PUT, DELETE도 사용할 수 있습니다. 그런데 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#filters-http-put">스프링 공식 레퍼런스</a>에 따르면 서블릿 API는 ServletRequest.getParameter*() 함수가 HTTP POST일 때만 폼 필드에 접근할 수 있다고 합니다. </p>
<p>위와 같은 내용이 맞다면 웹 요청 클라이언트가 PUT을 이용하여 요청 바디를 <code>application/x-www-form-urlencoded</code> 형식으로 전송한다면 스프링 웹 프레임워크는 요청 바디를 @ModelAttribute를 사용하여 바인딩할 수 없습니다. 그래서 스프링 프레임워크는 PUT이나 PATCH, DELETE 요청에 대해서도 <code>application/x-www-form-urlencoded</code>로 전송되는 요청 바디를 읽어 <code>ServletRequest.getParameter*()</code>로 접근할 수 있도록 지원하는 <code>FormContentFilter</code>를 제공합니다.</p>
<p>스프링 프레임워크의 FormContentFilter에서 사용하는 <code>FormHttpMessageConverter</code>는 <code>application/x-www-form-urlencoded</code>로 전송되는 데이터를 <code>Form Data</code>로 변환하는 작업을 수행합니다. 결국 우리는 @ModelAttribute를 선언하여 데이터 바인딩이 가능해집니다.</p>
<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><p><code>x-www-form-urlencoded</code> 형식으로 전송되는 요청 바디는 @RequestBody로 읽을 수 없습니다. 그래서 다음과 같은 오류가 발생합니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP Status 415 – Unsupported Media Type</span><br></pre></td></tr></table></figure>

<p>왜 메시지 컨버터를 통해 <code>x-www-form-urlencoded</code> 형식으로 전송한 요청 바디를 모델 오브젝트에 바인딩할 수 없었을까요?</p>
<p>스프링 웹 MVC는 기본적으로 FormHttpMessageConverter를 메시지 컨버터로 등록합니다. 그러니까 @RequestBody로 선언되어있고 <code>application/x-www-form-urlencoded</code>로 전송되었다면 FormHttpMessageConverter를 통해 메시지 컨버팅을 시도합니다. 그러나 FormHttpMessageConverter에 대한 설명을 찾아보면 다음과 같습니다.</p>
<blockquote>
<p>this converter can read and write the “application/x-www-form-urlencoded” media type as MultiValueMap&lt;String, String&gt;, and it can also write (but not read) the “multipart/form-data” and “multipart/mixed” media types as MultiValueMap&lt;String, Object&gt;.</p>
</blockquote>
<p>FormHttpMessageConverter는 <code>application/x-www-form-urlencoded</code> 전송인 경우 <code>MultiValueMap&lt;String, String&gt;</code> 형식으로 변환하며 <code>multipart/form-data</code>로 전송되는 경우 <code>MultiValueMap&lt;String, Object&gt;</code>로 변환된다고 설명합니다.</p>
<p>따라서, 모델 오브젝트에 대해서 @RequestBody로 데이터 바인딩을 시도할 때 <code>application/x-www-form-urlencoded</code>로 전송된 데이터는 MultiValueMap&lt;String, String&gt; 형식의 오브젝트로만 변환된다는 말입니다. 결국 FormHttpMessageConverter가 처리할 수 없는 유형이기 때문에 Unsupported Media Type가 응답된 것입니다.</p>
<hr>
<p>앞선 내용을 종합해서 정리하면 다음과 같습니다.</p>
<ol>
<li>HTML 폼 데이터 전송은 <code>application/x-www-form-urlencoded</code>으로 보내는 것이다.</li>
<li>기본 서블릿 API는 POST로 전송되었을때만 폼 데이터에 접근할 수 있도록 <code>제한</code>한다.</li>
<li>스프링 프레임워크는 <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code>와 함께 application/x-www-form-urlencoded로 전송되었을때 폼 데이터에 접근할 수 있도록 래핑한다.</li>
<li>@RequestBody가 선언되고 application/x-www-form-urlencoded로 전송된 경우 <code>FormHttpMessageConverter</code>에 의해 <code>MultiValueMap</code>으로 변환된다.</li>
<li>application/x-www-form-urlencoded로 전송되는 데이터를 <code>@RequestBody</code>를 선언하여 모델 오브젝트로 바인딩할 수 없다.</li>
</ol>
<p>이제 여러분은 컨트롤러 핸들러 함수의 매개변수에 대한 데이터 바인딩을 위해 @ModelAttribute를 사용해야할 경우와 @RequestBody를 사용해야하는 경우를 구분할 수 있게 되었습니다. 부디 많은 스프링 애플리케이션 개발자들에게 도움이 되었길 바랍니다.</p>
]]></content>
      <categories>
        <category>스프링 프레임워크 이야기</category>
      </categories>
  </entry>
  <entry>
    <title>스프링 프레임워크는 어떻게 예외를 처리할까?</title>
    <url>/docs/how-does-springframework-resolve-exceptions/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>스프링 프레임워크 기반의 웹 애플리케이션에서 웹 요청을 처리하는 과정에서 발생하는 예외(Exception)에 대하여 어떻게 처리하는 걸까요? 이번 글에서는 스프링 프레임워크가 예외에 대한 처리를 담당하는 인터페이스와 함께 여러가지 예외 처리 전략에 대하여 알아봅니다.</p>
<h2 id="Exception-Handling-Strategy"><a href="#Exception-Handling-Strategy" class="headerlink" title="Exception Handling Strategy"></a>Exception Handling Strategy</h2><p>이번 글의 목표는 스프링 프레임워크가 요청에 대한 예외를 처리하는 전략에 대해서 알아보는 것입니다. 스프링 프레임워크의 <code>webmvc</code> 모듈에는 <code>HandlerExceptionResolver</code>라는 인터에피스를 제공합니다. HandlerExceptionResolver는 웹 요청을 처리할 핸들러 함수를 매핑하거나 핸들러 함수가 요청을 처리하는 과정에서 발생하는 예외를 처리할 수 있도록 지원합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Object handler, Exception ex)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다시 말해, HandlerExceptionResolver는 디스패처 서블릿과 컨트롤러 컴포넌트에서 발생하는 예외에 대하여 어떻게 처리해야하는지를 결정하는 전략이라고 할 수 있습니다. 우리는 이 전략에 대하여 공부하기 위하여 HandlerExceptionResolver 구현체들을 살펴보도록 합니다.</p>
<h3 id="HandlerExceptionResolver"><a href="#HandlerExceptionResolver" class="headerlink" title="HandlerExceptionResolver"></a>HandlerExceptionResolver</h3><p><code>webmvc</code> 모듈에는 스프링 프레임워크에서 제공하는 기본적인 HandlerExceptionResolver 구현체들이 포함되어있습니다. </p>
<ul>
<li>HandlerExceptionResolverComposite</li>
<li>ExceptionHandlerExceptionResolver</li>
<li>ResponseStatusExceptionResolver</li>
<li>DefaultHandlerExceptionResolver</li>
</ul>
<p>특히, <code>HandlerExceptionResolverComposite</code> 구현체는 <code>@EnableWebMvc</code>를 구성 메타정보 클래스에 선언하면 추가되는 <code>WebMvcConfigurationSupport</code> 클래스에서 HandlerExceptionResolver 유형의 빈으로 등록합니다. 이 구현체는 다른 HandlerExceptionResolver 구현체들에게 예외에 대한 처리를 위임하도록 담당하는 특별한 역할을 하게 됩니다. 따라서, 우리는 HandlerExceptionResolverComposite를 통해 여러가지 HandlerExceptionResolver 구현체를 통해 예외를 처리할 수 있도록 전략을 적용할 수 있게 됩니다.</p>
<figure class="highlight java"><figcaption><span>HandlerExceptionResolverComposite.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.resolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (HandlerExceptionResolver handlerExceptionResolver : <span class="keyword">this</span>.resolvers) &#123;</span><br><span class="line">            ModelAndView mav = handlerExceptionResolver.resolveException(request, response, handler, ex);</span><br><span class="line">                <span class="keyword">if</span> (mav != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> mav;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>우리는 이제 스프링 프레임워크에서 제공하면서 예외에 대한 처리를 담당하는 HandlerExceptionResolver 구현체에 대해서 알아볼 것입니다. HandlerExceptionResolverComposite는 예외 처리를 담당할 HandlerExceptionResolver를 다음과 같은 순서로 처리하게 됩니다.</p>
<ul>
<li>ExceptionHandlerExceptionResolver</li>
<li>ResponseStatusExceptionResolver</li>
<li>DefaultHandlerExceptionResolver</li>
</ul>
<p>HandlerExceptionResolverComposite의 <code>addDefaultHandlerExceptionResolvers()</code> 함수를 살펴보면 위 순서로 등록하는 것을 알 수 있습니다.</p>
<figure class="highlight java"><figcaption><span>HandlerExceptionResolverComposite.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addDefaultHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; exceptionResolvers, ContentNegotiationManager mvcContentNegotiationManager)</span> </span>&#123;</span><br><span class="line">    ExceptionHandlerExceptionResolver exceptionHandlerResolver = createExceptionHandlerExceptionResolver();</span><br><span class="line">    exceptionHandlerResolver.setContentNegotiationManager(mvcContentNegotiationManager);</span><br><span class="line">    exceptionHandlerResolver.setMessageConverters(getMessageConverters());</span><br><span class="line">    exceptionHandlerResolver.setCustomArgumentResolvers(getArgumentResolvers());</span><br><span class="line">    exceptionHandlerResolver.setCustomReturnValueHandlers(getReturnValueHandlers());</span><br><span class="line">    <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">        exceptionHandlerResolver.setResponseBodyAdvice(Collections.singletonList(<span class="keyword">new</span> JsonViewResponseBodyAdvice()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        exceptionHandlerResolver.setApplicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    exceptionHandlerResolver.afterPropertiesSet();</span><br><span class="line">    exceptionResolvers.add(exceptionHandlerResolver);</span><br><span class="line"></span><br><span class="line">    ResponseStatusExceptionResolver responseStatusResolver = <span class="keyword">new</span> ResponseStatusExceptionResolver();</span><br><span class="line">    responseStatusResolver.setMessageSource(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    exceptionResolvers.add(responseStatusResolver);</span><br><span class="line"></span><br><span class="line">    exceptionResolvers.add(<span class="keyword">new</span> DefaultHandlerExceptionResolver());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ExceptionHandlerExceptionResolver"><a href="#ExceptionHandlerExceptionResolver" class="headerlink" title="ExceptionHandlerExceptionResolver"></a>ExceptionHandlerExceptionResolver</h4><p>HandlerExceptionResolverComposite에 의해 가장 먼저 예외를 처리하는 <code>ExceptionHandlerExceptionResolver</code>는 <code>@ExceptionHandler</code>가 선언된 핸들러 함수에서 발생한 예외를 담당합니다.</p>
<figure class="highlight java"><figcaption><span>ExceptionHandlerExceptionResolver.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandlerExceptionResolver</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodExceptionResolver</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveHandlerMethodException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> HandlerMethod handlerMethod, Exception exception)</span> </span>&#123;</span><br><span class="line">        ServletInvocableHandlerMethod exceptionHandlerMethod = getExceptionHandlerMethod(handlerMethod, exception);</span><br><span class="line">        <span class="keyword">if</span> (exceptionHandlerMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 코드처럼 <code>@ExceptionHandler</code>가 선언된 핸들러 함수라면 예외에 대한 처리를 담당하며 아니라면 null을 반환하여 다른 HandlerExceptionResolver 구현체가 예외에 대한 처리를 담당하도록 합니다. ExceptionHandlerExceptionResolver는 ServletInvocableHandlerMethod를 활용하여 핸들러 함수를 호출합니다. 이 과정에서 HandlerMethodArgumentResolver와 HandlerMethodReturnValueHandler를 통해 핸들러 함수의 매개변수에 값을 주입하거나 응답 객체에 따른 응답을 지원합니다. 다시 말하면, @ExceptionHandler가 선언된 핸들러 함수는 컨트롤러 컴포넌트에 선언된 핸들러 함수와 같이 동작하는 것이라고 할 수 있습니다.</p>
<p>따라서, <code>@ExceptionHandler</code>는 <code>@Controller</code> 또는 <code>@ControllerAdvice</code>가 선언된 컴포넌트의 함수에 선언할 수 있습니다.</p>
<h4 id="ResponseStatusExceptionResolver"><a href="#ResponseStatusExceptionResolver" class="headerlink" title="ResponseStatusExceptionResolver"></a>ResponseStatusExceptionResolver</h4><p>ExceptionHandlerExceptionResolver에 의해 처리되지 않은 예외라면 @ExceptionHandler가 선언된 핸들러 함수에서 해당 예외 클래스를 담당하지 않았다는 것입니다. 이 예외들은 <code>ResponseStatusExceptionResolver</code>가 처리를 담당하게 되며 예외 클래스에 <code>@ResponseStatus</code>가 선언되었는지를 판단하여 처리할 지 결정하게 됩니다. </p>
<figure class="highlight java"><figcaption><span>ResponseStatusExceptionResolver.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> ResponseStatusException) &#123;</span><br><span class="line">            <span class="keyword">return</span> resolveResponseStatusException((ResponseStatusException) ex, request, response, handler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ResponseStatus status = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);</span><br><span class="line">        <span class="keyword">if</span> (status != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> resolveResponseStatus(status, request, response, handler, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ex.getCause() <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            <span class="keyword">return</span> doResolveException(request, response, handler, (Exception) ex.getCause());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception resolveEx) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Failure while trying to resolve exception [&quot;</span> + ex.getClass().getName() + <span class="string">&quot;]&quot;</span>, resolveEx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>스프링 5+ 부터는 <code>ResponseStatusException</code> 예외 클래스가 추가되었으며 ResponseStatusExceptionResolver가 ResponseStatusException 클래스도 담당하여 처리하게 됩니다. 그리고 다른 예외 클래스에 @ResponseStatus가 선언되었다면 설정된 값에 의해 예외를 처리하게 됩니다. 따라서, 우리는 예외 클래스에 @ResponseStatus를 선언하여 쉽게 예외에 대한 응답을 처리할 수 있습니다.</p>
<h4 id="DefaultHandlerExceptionResolver"><a href="#DefaultHandlerExceptionResolver" class="headerlink" title="DefaultHandlerExceptionResolver"></a>DefaultHandlerExceptionResolver</h4><p>가장 마지막으로 처리를 담당하는 <code>DefaultHandlerExceptionResolver</code>는 스프링 프레임워크에서 제공하는 기본 MVC 예외 클래스에 대한 예외 처리를 담당합니다. 다음은 DefaultHandlerExceptionResolver가 처리하는 예외 유형과 HTTP 상태 코드에 대한 표입니다.</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>HTTP Status Code</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>HttpRequestMethodNotSupportedException</td>
<td>405 (SC_METHOD_NOT_ALLOWED)</td>
<td>HTTP 메소드를 지원하지 않는 경우</td>
</tr>
<tr>
<td>HttpMediaTypeNotSupportedException</td>
<td>415 (SC_UNSUPPORTED_MEDIA_TYPE)</td>
<td>POST, PUT, PATCH 요청에 대하여 지원하지 않는 미디어 타입인 경우</td>
</tr>
<tr>
<td>HttpMediaTypeNotAcceptableException</td>
<td>406 (SC_NOT_ACCEPTABLE)</td>
<td></td>
</tr>
<tr>
<td>MissingPathVariableException</td>
<td>500 (SC_INTERNAL_SERVER_ERROR)</td>
<td>URI 템플릿에 PathVariable을 찾을 수 없는 경우</td>
</tr>
<tr>
<td>MissingServletRequestParameterException</td>
<td>400 (SC_BAD_REQUEST)</td>
<td>요청 파라미터를 찾을 수 없는 경우</td>
</tr>
<tr>
<td>ServletRequestBindingException</td>
<td>400 (SC_BAD_REQUEST)</td>
<td>바인딩 과정에서 오류가 발생한 경우</td>
</tr>
<tr>
<td>ConversionNotSupportedException</td>
<td>500 (SC_INTERNAL_SERVER_ERROR)</td>
<td></td>
</tr>
<tr>
<td>TypeMismatchException</td>
<td>400 (SC_BAD_REQUEST)</td>
<td></td>
</tr>
<tr>
<td>HttpMessageNotReadableException</td>
<td>400 (SC_BAD_REQUEST)</td>
<td></td>
</tr>
<tr>
<td>HttpMessageNotWritableException</td>
<td>500 (SC_INTERNAL_SERVER_ERROR)</td>
<td>HttpMessageConverter에 의해 변환될 수 없는 경우</td>
</tr>
<tr>
<td>MethodArgumentNotValidException</td>
<td>400 (SC_BAD_REQUEST)</td>
<td></td>
</tr>
<tr>
<td>MissingServletRequestPartException</td>
<td>400 (SC_BAD_REQUEST)</td>
<td></td>
</tr>
<tr>
<td>BindException</td>
<td>400 (SC_BAD_REQUEST)</td>
<td></td>
</tr>
<tr>
<td>NoHandlerFoundException</td>
<td>404 (SC_NOT_FOUND)</td>
<td>throwExceptionIfNoHandlerFound이면서 웹 요청에 대한 핸들러 함수가 없는 경우</td>
</tr>
<tr>
<td>AsyncRequestTimeoutException</td>
<td>503 (SC_SERVICE_UNAVAILABLE)</td>
<td></td>
</tr>
</tbody></table>
<p>만약, 스프링 프레임워크에서 제공하는 기본 예외 클래스들에 대한 응답 전략 구성하고 싶다면 @ExceptionHandler를 선언한 핸들러 함수에서 처리할 수 있습니다. 그리고 DefaultHandlerExceptionResolver는 기본 예외 클래스에 대한 응답 전략을 제공하므로 HandlerExceptionResolver 유형의 빈으로 등록하는 것이 좋습니다.</p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>이 섹션은 앞서 알아본 예외 처리 전략에 대해서 공부할 수 있는 예시를 제공합니다.</p>
<blockquote>
<p>업데이트 대기중</p>
</blockquote>
<hr>
<p>이번 글을 통해 우리는 스프링 프레임워크 기반의 웹 애플리케이션에서 요청에 대한 예외를 어떻게 처리하는지를 알게되었습니다. 이제 여러분의 프로젝트에서는 어떤 예외 처리 전략을 구성하였는지 확인해보시고 올바르게 전략을 세우고 있는지 검토해보시기 바랍니다.</p>
]]></content>
      <categories>
        <category>스프링 프레임워크 이야기</category>
      </categories>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 - BOM(Bill of Materials)</title>
    <url>/docs/spring-web-application-bom/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>스프링 부트 프로젝트에서는 의존성을 추가할 때 버전을 명시하지 않습니다. 이번 글은 스프링 프레임워크에서 제공하는 의존성 관리 기능에 대해서 알아보고 의존성 버전 관리를 위임하는 방법에 대해서 배우도록 하겠습니다.</p>
<h2 id="Dependency-Management-Gradle-Plugin"><a href="#Dependency-Management-Gradle-Plugin" class="headerlink" title="Dependency Management Gradle Plugin"></a>Dependency Management Gradle Plugin</h2><p>우리는 스프링 프레임워크 기반의 웹 애플리케이션에서 사용되는 의존성을 다음과 같이 추가하였습니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-webmvc:5.2.8.RELEASE&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;javax.servlet:javax.servlet-api:4.0.1&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.apache.tomcat.embed:tomcat-embed-core:9.0.37&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.apache.tomcat.embed:tomcat-embed-jasper:9.0.37&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.slf4j:slf4j-api:1.7.30&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;ch.qos.logback:logback-classic:1.2.3&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;ch.qos.logback:logback-access:1.2.3&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.freemarker:freemarker:2.3.30&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-context-support:5.2.8.RELEASE&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;com.sun.mail:javax.mail:1.6.2&#x27;</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="string">&#x27;org.springframework:spring-test:5.2.8.RELEASE&#x27;</span></span><br><span class="line">    testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>스프링 프레임워크에서 제공하는 <code>spring-webmvc</code>와 <code>spring-context-support</code> 그리고 <code>spring-test</code>와 같이 5.2.8.RELEASE 버전을 동일하게 지정하였습니다. 이렇게 연관된 의존성에 대한 버전을 별도로 명시하는 것이 번거롭다고 느낄 수 있습니다.</p>
<h3 id="io-spring-dependency-management"><a href="#io-spring-dependency-management" class="headerlink" title="io.spring.dependency-management"></a>io.spring.dependency-management</h3><p>스프링에서는 의존성 버전 관리를 위해 <a href="https://plugins.gradle.org/plugin/io.spring.dependency-management"><code>io.spring.dependency-management</code></a> 플러그인을 제공합니다. <code>io.spring.dependency-management</code>는 dependencyManagement 구문을 통해 의존성 관리를 위한 기능을 제공합니다. 그리고 imports를 통해 Maven BOM을 적용할 수 있습니다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&quot;io.spring.dependency-management&quot;</span> version <span class="string">&quot;1.0.10.RELEASE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;org.springframework:spring-framework-bom:5.2.8.RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Bill-of-Materials"><a href="#Bill-of-Materials" class="headerlink" title="Bill of Materials"></a>Bill of Materials</h2><p><code>Maven BOM(Bill of Materials)</code>을 활용하면 프로젝트에서 사용되는 의존성을 쉽게 관리할 수 있습니다. 그리고 앞서 <code>io.spring.dependency-management</code> 플러그인을 추가하였으므로 BOM을 적용할 수 있게되었습니다. </p>
<p>그리고 위에서 추가한 <code>spring-framework-bom</code>과 같이 스프링 프레임워크에서 제공하는 여러가지 BOM이 있습니다.</p>
<ul>
<li><a href="https://mvnrepository.com/artifact/org.springframework/spring-framework-bom">Spring Framework (Bill of Materials)</a></li>
<li><a href="https://mvnrepository.com/artifact/org.springframework.session/spring-session-bom">Spring Session Maven Bill of Materials (BOM)</a></li>
<li><a href="https://mvnrepository.com/artifact/org.springframework.integration/spring-integration-bom">Spring Integration (Bill of Materials)</a></li>
<li><a href="https://mvnrepository.com/artifact/org.springframework.data/spring-data-releasetrain">Spring Data Release Train BOM</a></li>
<li><a href="https://mvnrepository.com/artifact/org.springframework.security/spring-security-bom">Spring Security BOM</a></li>
<li><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies">Spring Boot Dependencies</a></li>
</ul>
<p>스프링 프레임워크 기반의 웹 애플리케이션에서 사용되는 의존성을 별도로 지정하지 않아도 BOM에 의해 의존성에 대한 버전이 관리됩니다.</p>
<h3 id="spring-framework-bom"><a href="#spring-framework-bom" class="headerlink" title="spring-framework-bom"></a>spring-framework-bom</h3><p><code>spring-framework-bom</code>은 스프링 프레임워크에 대한 기본 모듈인 <code>spring-core</code>와 <code>spring-wemvc</code>와 같은 의존성들을 관리합니다. 따라서, 다음과 같이 기본 모듈에 대한 버전을 제거할 수 있습니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&quot;io.spring.dependency-management&quot;</span> version <span class="string">&quot;1.0.10.RELEASE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;org.springframework:spring-framework-bom:5.2.8.RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-webmvc&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-context-support&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-jdbc&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-webflux&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-tx&#x27;</span></span><br><span class="line">    testCompile <span class="string">&#x27;org.springframework:spring-test&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring-session-bom"><a href="#spring-session-bom" class="headerlink" title="spring-session-bom"></a>spring-session-bom</h3><p><code>spring-session-bom</code>은 스프링 세션 프로젝트에 대한 모듈을 관리합니다. 따라서, <code>spring-session-core</code>와 <code>spring-session-data-redis</code>에 대한 의존성 버전을 제거할 수 있게 됩니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&quot;io.spring.dependency-management&quot;</span> version <span class="string">&quot;1.0.10.RELEASE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;org.springframework.session:spring-session-bom:Dragonfruit-RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.session:spring-session-core&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.session:spring-session-data-redis&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="spring-security-bom"><a href="#spring-security-bom" class="headerlink" title="spring-security-bom"></a>spring-security-bom</h3><p><code>spring-security-bom</code>은 스프링 시큐리티 프로젝트에 대한 모듈을 관리합니다. 따라서, <code>spring-security-core</code>와 <code>spring-security-config</code>에 대한 의존성 버전을 제거할 수 있게 됩니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&quot;io.spring.dependency-management&quot;</span> version <span class="string">&quot;1.0.10.RELEASE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;org.springframework.security:spring-security-bom:5.3.4.RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.security:spring-security-web:5.3.4.RELEASE&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.security:spring-security-config:5.3.4.RELEASE&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring-boot-dependencies"><a href="#spring-boot-dependencies" class="headerlink" title="spring-boot-dependencies"></a>spring-boot-dependencies</h3><p><code>spring-boot-dependencies</code>은 스프링 부트 프로젝트에서 사용되는 의존성들을 관리하는 BOM입니다. 이 BOM에서는 <code>javax.servlet-api</code>와 <code>tomcat-embed-core</code>와 같은 스프링 프레임워크와 함께 사용되는 여러가지 의존성에 대한 버전도 같이 관리됩니다. 그리고 <code>spring-framework-bom</code>와 <code>spring-session-bom</code>도 포함됩니다.</p>
<p>따라서, 다음과 같이 스프링 프레임워크에서 제공하는 모듈이 아니어도 의존성 버전을 관리할 수 있게 됩니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&quot;io.spring.dependency-management&quot;</span> version <span class="string">&quot;1.0.10.RELEASE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;org.springframework.boot:spring-boot-dependencies:2.3.3.RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-webmvc&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;javax.servlet:javax.servlet-api&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.apache.tomcat.embed:tomcat-embed-core&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.apache.tomcat.embed:tomcat-embed-jasper&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.slf4j:slf4j-api&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;ch.qos.logback:logback-classic&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;ch.qos.logback:logback-access&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.freemarker:freemarker&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-context-support&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;com.sun.mail:javax.mail:1.6.2&#x27;</span></span><br><span class="line">    </span><br><span class="line">    implementation <span class="string">&#x27;com.zaxxer:HikariCP&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-jdbc&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.postgresql:postgresql&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-webflux&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;io.projectreactor.netty:reactor-netty&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.session:spring-session-core&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.session:spring-session-data-redis&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;io.lettuce:lettuce-core&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;com.fasterxml.jackson.core:jackson-databind&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.code.gson:gson&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;net.minidev:json-smart&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.quartz-scheduler:quartz&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.quartz-scheduler:quartz-jobs&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-tx&#x27;</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="string">&#x27;org.springframework:spring-test&#x27;</span></span><br><span class="line">    testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>javax.mail</code>와 같이 BOM에 의해 관리되는 의존성이 아니라면 별도로 버전을 명시해야합니다.</p>
<h2 id="Overriding-Versions-in-a-BOM"><a href="#Overriding-Versions-in-a-BOM" class="headerlink" title="Overriding Versions in a BOM"></a>Overriding Versions in a BOM</h2><p>때때로, 필요에 의해 BOM에 의해 관리되는 의존성 버전을 변경해야할 필요성이 있습니다. 물론, 의존성을 추가할 때 별도로 지정할 수 있지만 <code>io.spring.dependency-management</code>에서 제공하는 방법을 활용하는 것이 좋습니다.</p>
<h3 id="bomProperty"><a href="#bomProperty" class="headerlink" title="bomProperty"></a>bomProperty</h3><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom(<span class="string">&#x27;org.springframework.boot:spring-boot-dependencies:2.3.3.RELEASE&#x27;</span>) &#123;</span><br><span class="line">            bomProperty <span class="string">&#x27;tomcat.version&#x27;</span>, <span class="string">&#x27;9.0.38&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ext"><a href="#ext" class="headerlink" title="ext"></a>ext</h3><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">ext[<span class="string">&#x27;tomcat.version&#x27;</span>] = <span class="string">&#x27;9.0.38&#x27;</span></span><br><span class="line">ext[<span class="string">&#x27;postgresql.version&#x27;</span>] = <span class="string">&#x27;42.2.14&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h3><figure class="highlight properties"><figcaption><span>gradle.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">tomcat.version</span>=<span class="string">9.0.38</span></span><br><span class="line"><span class="meta">postgresql.version</span>=<span class="string">42.2.14</span></span><br></pre></td></tr></table></figure>

<hr>
<p>스프링 프레임워크에서 제공하는 그레이들 플러그인과 BOM을 적용하여 의존성 버전 관리를 위임하였습니다. 이렇게 의존성 버전 관리를 위임하는 것은 스프링 프레임워크 기반의 애플리케이션을 만들때 사용되는 여러가지 의존성에 대한 버전에 대한 고민을 해결해주는 장점이 있습니다. 스프링 프레임워크에서 제공하는 BOM을 이용하므로써 스프링 프레임워크 모듈과 가장 적합한 호환성을 제공하는 버전을 적용할 수 있게 됩니다.</p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 - 데이터베이스 액세스</title>
    <url>/docs/spring-web-application-database-access/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<p>일반적으로 웹 애플리케이션에서 발생하는 데이터를 저장하기 위하여 관계형 데이터베이스를 사용합니다. 스프링 프레임워크는 관계형 데이터베이스에 연결할 수 있도록 DataSource에 대한 추상화를 제공합니다. 따라서, JDBC 또는 JPA와 같은 데이터 액세스 기술을 적용할 수 있도록 지원하고 있습니다.</p>
<h2 id="Data-Access"><a href="#Data-Access" class="headerlink" title="Data Access"></a>Data Access</h2><p>스프링 프레임워크는 JDBC, JPA와 같은 <code>데이터 액세스</code> 기술과 함께 <code>Data Access Object</code>를 지원합니다. 스프링 프레임워크에서 제공하는 <code>@Repository</code>는 DAO를 지칭할 수 있는 가장 좋은 방법입니다. 스프링 프레임워크는 <code>@Repository</code>가 선언된 빈 클래스에서 발생되는 <code>SQLException</code>을 일관된 <code>DataAccessException</code>으로 변환하는 작업을 수행합니다.</p>
<h3 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h3><p>스프링은 <code>DataSource</code> 인터페이스를 통해 데이터베이스에 대한 <code>커넥션</code>을 가져옵니다. 애플리케이션 개발자는 데이터베이스에 어떤 방식으로 연결하는지 자세히 알 필요는 없으며 Tomcat JDBC, Apache Commons DBCP 그리고 <code>HikariCP</code>와 같은 JDBC 커넥션 풀에서 제공하는 DataSource 구현체를 사용하면 됩니다.</p>
<h4 id="HikariCP"><a href="#HikariCP" class="headerlink" title="HikariCP"></a>HikariCP</h4><p><a href="https://github.com/brettwooldridge/HikariCP"><code>HikariCP</code></a>는 가벼움을 자랑하는 JDBC 커넥션 풀 라이브러리입니다. </p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.zaxxer:HikariCP:3.4.5&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.postgresql:postgresql:42.2.16&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.springframework:spring-jdbc:5.2.8.RELEASE&#x27;</span></span><br></pre></td></tr></table></figure>

<p>애플리케이션에서 연결할 데이터베이스 정보를 application.properties에 기술합니다.</p>
<figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">org.postgresql.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:postgresql://localhost:5432/postgres</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">postgres</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">postgres</span></span><br><span class="line"><span class="meta">spring.datasource.auto-commit</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p>HikariCP에서 제공하는 <code>HikariDataSource</code>를 DataSource 빈으로 등록합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:/application.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;</span></span><br><span class="line"><span class="meta">    &quot;com.example.demo.repository&quot;,</span></span><br><span class="line"><span class="meta">    &quot;com.example.demo.service&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> <span class="keyword">implements</span> <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HikariDataSource dataSource = <span class="keyword">new</span> HikariDataSource();</span><br><span class="line">        dataSource.setDriverClassName(environment.getProperty(<span class="string">&quot;spring.datasource.driver-class-name&quot;</span>, String.class));</span><br><span class="line">        dataSource.setJdbcUrl(environment.getProperty(<span class="string">&quot;spring.datasource.url&quot;</span>, String.class));</span><br><span class="line">        dataSource.setUsername(environment.getProperty(<span class="string">&quot;spring.datasource.username&quot;</span>, String.class));</span><br><span class="line">        dataSource.setPassword(environment.getProperty(<span class="string">&quot;spring.datasource.password&quot;</span>, String.class));</span><br><span class="line">        dataSource.setAutoCommit(environment.getProperty(<span class="string">&quot;spring.datasource.auto-commit&quot;</span>, Boolean.class, <span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/data-access.html#jdbc-JdbcTemplate"><code>JdbcTemplate</code></a>는 SQL을 수행할 수 있는 주요 클래스입니다.</p>
<p>중요한 점은 다음과 같이 다수의 DAO에 대해 공유하기 위하여 안전하게 주입하려면 DataSource에 대한 Setter 주입 시 JdbcTemplate 인스턴스를 생성하는 것이 좋습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> DataSource dataSource;</span><br><span class="line">    <span class="keyword">protected</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이외에도 <code>SimpleJdbcInsert</code> 또는 <code>SimpleJdbcCall</code>를 사용하여 데이터베이스에 접근할 수 있습니다.</p>
<h4 id="SQLExceptionTranslator"><a href="#SQLExceptionTranslator" class="headerlink" title="SQLExceptionTranslator"></a>SQLExceptionTranslator</h4><p>SQLExceptionTranslator 인터페이스는 <code>SQLExceptions</code>와 <code>org.springframework.dao.DataAccessException</code> 사이의 변환을 지원합니다. 기본적으로 <code>SQLErrorCodeSQLExceptionTranslator</code> 구현체가 사용됩니다. </p>
<p>JdbcTemplate.setExceptionTranslator() 함수로 SQLExceptionTranslator를 변경할 수 있습니다.</p>
<h2 id="Transaction-Management"><a href="#Transaction-Management" class="headerlink" title="Transaction Management"></a>Transaction Management</h2><p>스프링 프레임워크의 <code>spring-tx</code> 모듈은 TransactionManager 인터페이스를 통해 트랜잭션 관리를 위한 추상화를 제공합니다.</p>
<h3 id="TransactionManager"><a href="#TransactionManager" class="headerlink" title="TransactionManager"></a>TransactionManager</h3><p>스프링 프레임워크의 TransactionManager 인터페이스는 트랜잭션 전략을 정의합니다. PlatformTransactionManager는 명령형 트랜잭션 관리를 제공합니다. 예를 들어, 다음과 같이 JDBC DataSource에 대한 트랜잭션 지원을 위해 <code>DataSourceTransactionManager</code>를 사용할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Declarative-transaction-management"><a href="#Declarative-transaction-management" class="headerlink" title="Declarative transaction management"></a>Declarative transaction management</h3><p>스프링 프레임워크는 선언적 트랜잭션 관리라는 기능을 제공합니다. 대부분의 스프링 애플리케이션 개발자는 주로 선언적 트랜잭션 관리를 사용합니다. 구성 메타정보 클래스에 <code>@EnableTransactionManagement</code>가 선언되면 <code>@Transactional</code>를 사용하여 트랜잭션을 관리할 수 있도록 활성화됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:/application.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;</span></span><br><span class="line"><span class="meta">    &quot;com.example.demo.repository&quot;,</span></span><br><span class="line"><span class="meta">    &quot;com.example.demo.service&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Transaction-bound-Events"><a href="#Transaction-bound-Events" class="headerlink" title="Transaction-bound Events"></a>Transaction-bound Events</h3><p>스프링 애플리케이션 컨텍스트에서 발행되는 이벤트는 <code>@EventListener</code>를 선언한 핸들러 함수를 통해 이벤트를 처리할 수 있었습니다. 발행된 이벤트를 처리하는 핸들러 함수에 대한 트랜잭션 관리가 필요하다면 <code>@TransactionalEventListener</code>를 대신 사용할 수 있습니다.</p>
<p>다음과 같이 트랜잭션이 진행중인 이벤트인 경우 <code>@TransactionalEventListener</code>를 선언하여 처리할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEventHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleUserCreatedEvent</span><span class="params">(CreationEvent&lt;User&gt; creationEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>만약, CreationEvent에 대한 이벤트 발행 시 트랜잭션안에서 처리되었다면 트랜잭션이 완료된 후에 <code>UserEventHandler</code>의 <code>handleUserCreatedEvent()</code> 핸들러 함수에 의해 이벤트가 처리됩니다.</p>
<hr>
<p>우리는 스프링 프레임워크 기반의 웹 애를리케이션에서 데이터베이스에 접근하기 위한 설정을 완료하였고 비즈니스 로직에서 선언적으로 트랜잭션을 관리하는 방법에 대해 알아보았습니다. </p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 - HTTP 요청 클라이언트</title>
    <url>/docs/spring-web-application-http-request-client/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<p>스프링 프레임워크 기반의 웹 애플리케이션에서 다른 웹 애플리케이션으로 요청해서 데이터를 받아와야하는 요구사항이 있을 수 있습니다. 이번 글에서는 스프링 프레임워크에서 제공하는 HTTP 요청 기능에 대해 알아보도록 하겠습니다.</p>
<h2 id="Rest-Clients"><a href="#Rest-Clients" class="headerlink" title="Rest Clients"></a>Rest Clients</h2><p>스프링 웹 애플리케이션에서 다른 웹 애플리케이션으로 HTTP 요청을 수행할 수 있는 HTTP 요청 클라이언트 클래스를 제공합니다.</p>
<h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html"><code>RestTemplate</code></a>는 서블릿 스택 기반의 웹 애플리케이션에서 사용할 수 있는 <code>동기형 HTTP 요청 클라이언트</code> 클래스입니다.</p>
<p>동기 방식의 <code>RestTemplate</code>는 다음과 같이 사용할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_KEY = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TEST_001</span><span class="params">()</span> <span class="keyword">throws</span> ParserConfigurationException, IOException, SAXException </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line">    UriComponents uriComponents = UriComponentsBuilder</span><br><span class="line">            .fromHttpUrl(<span class="string">&quot;http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson&quot;</span>)</span><br><span class="line">            .queryParam(<span class="string">&quot;serviceKey&quot;</span>, SERVICE_KEY)</span><br><span class="line">            .queryParam(<span class="string">&quot;pageNo&quot;</span>, <span class="number">1</span>)</span><br><span class="line">            .queryParam(<span class="string">&quot;numOfRows&quot;</span>, <span class="number">10</span>)</span><br><span class="line">            .queryParam(<span class="string">&quot;startCreateDt&quot;</span>, <span class="string">&quot;20200915&quot;</span>)</span><br><span class="line">            .queryParam(<span class="string">&quot;endCreateDt&quot;</span>, <span class="string">&quot;20200916&quot;</span>)</span><br><span class="line">            .build(<span class="keyword">true</span>);</span><br><span class="line">    URI uri = uriComponents.toUri();</span><br><span class="line"></span><br><span class="line">    String result = restTemplate.getForObject(uri, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="WebClient"><a href="#WebClient" class="headerlink" title="WebClient"></a>WebClient</h3><p><code>WebClient</code>는 리액티브 스택 기반의 웹 애플리케이션에서 사용할 수 있도록 <a href="https://mvnrepository.com/artifact/org.springframework/spring-webflux/5.2.8.RELEASE"><code>spring-webflux</code></a> 모듈에서 제공하는 논-블로킹 HTTP 요청 클라이언트입니다. WebClient는 기본적으로 <a href="https://github.com/reactor/reactor-netty"><code>Reactor Netty</code></a>를 HTTP 클라이언트 라이브러리를 사용하게 됩니다.</p>
<p>WebClient는 논-블로킹 HTTP 요청 클라이언트이지만 동기 방식도 지원합니다. 동기 방식을 지원하므로 서블릿 스택 기반의 웹 애플리케이션에서 WebClient를 사용할 수도 있습니다. 서블릿 스택 기반의 웹 애플리케이션에서 WebClient를 사용하고 싶다면 <code>spring-webflux</code>와 함께 <a href="https://mvnrepository.com/artifact/io.projectreactor.netty/reactor-netty/0.9.11.RELEASE"><code>reactor-netty</code></a> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework:spring-webflux:5.2.8.RELEASE&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;io.projectreactor.netty:reactor-netty:0.9.11.RELEASE&#x27;</span></span><br></pre></td></tr></table></figure>

<p>WebClient는 RestTemplate와 비교하여 다음과 같이 사용할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_KEY = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TEST_002</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SAXException, ParserConfigurationException </span>&#123;</span><br><span class="line">    DefaultUriBuilderFactory uriBuilderFactory = <span class="keyword">new</span> DefaultUriBuilderFactory(<span class="string">&quot;http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson&quot;</span>);</span><br><span class="line">    uriBuilderFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.VALUES_ONLY);</span><br><span class="line"></span><br><span class="line">    WebClient webClient = WebClient.builder()</span><br><span class="line">            .uriBuilderFactory(uriBuilderFactory)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    String result = webClient.get()</span><br><span class="line">            .uri(uriBuilder -&gt; &#123;</span><br><span class="line">                uriBuilder</span><br><span class="line">                    .queryParam(<span class="string">&quot;serviceKey&quot;</span>, SERVICE_KEY)</span><br><span class="line">                    .queryParam(<span class="string">&quot;pageNo&quot;</span>, <span class="number">1</span>)</span><br><span class="line">                    .queryParam(<span class="string">&quot;numOfRows&quot;</span>, <span class="number">10</span>)</span><br><span class="line">                    .queryParam(<span class="string">&quot;startCreateDt&quot;</span>, <span class="string">&quot;20200915&quot;</span>)</span><br><span class="line">                    .queryParam(<span class="string">&quot;endCreateDt&quot;</span>, <span class="string">&quot;20200916&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> uriBuilder.build();</span><br><span class="line">            &#125;)</span><br><span class="line">            .exchange()</span><br><span class="line">            .block(Duration.ofMinutes(<span class="number">1</span>))</span><br><span class="line">            .bodyToMono(String.class)</span><br><span class="line">            .block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 - 이메일 발송</title>
    <url>/docs/spring-web-application-mail/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<p>웹 애플리케이션에서 중요한 기능 중 하나는 이메일 발송 기능입니다. 예를 들어, 회원가입을 완료하였을 경우 안내 또는 추가적인 인증을 위하여 이메일을 발송할 수도 있으며 웹 애플리케이션에서 발생한 중요한 사항을 이메일로 제공해야할 필요성이 있습니다.</p>
<h2 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h2><p>스프링 프레임워크는 <a href="https://javaee.github.io/javamail/">JavaMail</a> 라이브러리를 사용하여 이메일을 발송할 수 있도록 지원합니다. 그리고 <code>JavaMailSender</code> 인터페이스를 통해 이메일에 대한 추상화를 지원합니다.</p>
<p>이메일 발송 기능을 추가하기 위하여 <a href="https://mvnrepository.com/artifact/com.sun.mail/javax.mail/1.6.2"><code>javax.mail</code></a>을 의존성에 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.sun.mail:javax.mail:1.6.2&#x27;</span></span><br></pre></td></tr></table></figure>

<p>클래스패스에 mail.properties 파일을 생성하여 이메일을 보낼때 사용할 프로퍼티를 작성합니다. 기술한 메일 프로퍼티는 구글 이메일 SMTP 서버를 통해 메일을 발송하기 위한 정보입니다.</p>
<figure class="highlight properties"><figcaption><span>mail.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">mail.host</span>=<span class="string">smtp.gmail.com</span></span><br><span class="line"><span class="meta">mail.port</span>=<span class="string">587</span></span><br><span class="line"><span class="meta">mail.protocol</span>=<span class="string">smtp</span></span><br><span class="line"><span class="meta">mail.default-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">mail.username</span>=<span class="string">username</span></span><br><span class="line"><span class="meta">mail.password</span>=<span class="string">password</span></span><br><span class="line"><span class="meta">mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">mail.stmp.ssl.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">mail.smtp.starttls.required</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">mail.smtp.starttls.enable</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p>스프링 프레임워크는 기본적으로 <code>JavaMailSenderImpl</code>라는 JavaMailSender 구현체를 제공하므로 JavaMailSenderImpl를 <code>MailSender</code>로 등록합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:/mail.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailConfig</span> <span class="keyword">implements</span> <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_HOST = <span class="string">&quot;mail.host&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_PORT = <span class="string">&quot;mail.port&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_PROTOCOL = <span class="string">&quot;mail.protocol&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_DEFAULT_ENCODING = <span class="string">&quot;mail.default-encoding&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_USERNAME = <span class="string">&quot;mail.username&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_PASSWORD = <span class="string">&quot;mail.password&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_SMTP_AUTH = <span class="string">&quot;mail.smtp.auth&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_SMTP_STARTTLS_REQUIRED = <span class="string">&quot;mail.smtp.starttls.required&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIL_SMTP_STARTTLS_ENABLE = <span class="string">&quot;mail.smtp.starttls.enable&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailConfig</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MailSender <span class="title">mailSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = environment.getProperty(MAIL_HOST, String.class);</span><br><span class="line">        <span class="keyword">int</span> port = environment.getProperty(MAIL_PORT, Integer.class, -<span class="number">1</span>);</span><br><span class="line">        String protocol = environment.getProperty(MAIL_PROTOCOL, String.class);</span><br><span class="line">        String defaultEncoding = environment.getProperty(MAIL_DEFAULT_ENCODING, String.class, StandardCharsets.UTF_8.displayName());</span><br><span class="line">        String username = environment.getProperty(MAIL_USERNAME, String.class);</span><br><span class="line">        String password = environment.getProperty(MAIL_PASSWORD, String.class);</span><br><span class="line"></span><br><span class="line">        JavaMailSenderImpl javaMailSender = <span class="keyword">new</span> JavaMailSenderImpl();</span><br><span class="line">        javaMailSender.setHost(host);</span><br><span class="line">        javaMailSender.setPort(port);</span><br><span class="line">        javaMailSender.setProtocol(protocol);</span><br><span class="line">        javaMailSender.setDefaultEncoding(defaultEncoding);</span><br><span class="line">        javaMailSender.setUsername(username);</span><br><span class="line">        javaMailSender.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> auth = environment.getProperty(MAIL_SMTP_AUTH, Boolean.class, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">boolean</span> startTlsRequired = environment.getProperty(MAIL_SMTP_STARTTLS_REQUIRED, Boolean.class, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">boolean</span> startTlsEnable = environment.getProperty(MAIL_SMTP_STARTTLS_ENABLE, Boolean.class, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Properties javaMailProperties = <span class="keyword">new</span> Properties();</span><br><span class="line">        javaMailProperties.setProperty(MAIL_SMTP_AUTH, Boolean.toString(auth));</span><br><span class="line">        javaMailProperties.setProperty(MAIL_SMTP_STARTTLS_ENABLE, Boolean.toString(startTlsEnable));</span><br><span class="line">        javaMailProperties.setProperty(MAIL_SMTP_STARTTLS_REQUIRED, Boolean.toString(startTlsRequired));</span><br><span class="line">        javaMailSender.setJavaMailProperties(javaMailProperties);</span><br><span class="line">        <span class="keyword">return</span> javaMailSender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 MailSender를 통해 이메일을 발송할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailService</span> <span class="keyword">implements</span> <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MailSender mailSender;</span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailService</span><span class="params">(MailSender mailSender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mailSender = mailSender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>만약, 이메일 발송 시 <code>인증 오류</code>가 발생한다면 구글 계정에 대한 <a href="https://myaccount.google.com/lesssecureapps"><code>보안 수준이 낮은 앱의 액세스</code></a>를 활성화하시기 바랍니다. 구글 이메일 클라이언트로 SMTP 서버를 이용하기 위해서는 다음과 같은 정보로 사용해야 합니다.</p>
<ul>
<li>Host : smtp.gmail.com</li>
<li>Auth required(mail.smtp.auth): 예</li>
<li>SSL required(mail.smtp.ssl.enable): 예</li>
<li>SSL Port: 465</li>
<li>TLS/STARTTLS Port: 587</li>
<li>TLS required: 예(사용 가능한 경우)</li>
</ul>
<h2 id="Email-Template-Engine"><a href="#Email-Template-Engine" class="headerlink" title="Email Template Engine"></a>Email Template Engine</h2><blockquote>
<p>업데이트 대기중입니다.</p>
</blockquote>
<hr>
<p>이제 여러분은 스프링 프레임워크 기반의 웹 애플리케이션에서 이메일을 발송할 수 있습니다. </p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 - 보안</title>
    <url>/docs/spring-web-application-security/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 시큐리티 Version <code>5.3.4.RELEASE</code> 문서와 <a href="https://okky.kr/article/382738"><code>초보가 이해하는 스프링 시큐리티</code></a>를 기반으로 작성하였습니다.</p>
<h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>보안 전문가가 아니고서야 일반 개발자가 애플리케이션에 대한 보안 기능을 적용하는 것은 쉽지 않습니다. 스프링 시큐리티는 스프링 프레임워크를 기반으로 애플리케이션을 개발하는 개발자들이 쉽게 보안을 적용할 수 있는 매커니즘을 제공합니다. </p>
<h3 id="Security-Architecture"><a href="#Security-Architecture" class="headerlink" title="Security Architecture"></a>Security Architecture</h3><p>스프링 프레임워크 기반의 애플리케이션에 스프링 시큐리티를 적용하기에 앞서 스프링 시큐리티의 기반이 되는 보안 아키텍처에 대해 알아야합니다. 저는 이전에 <a href="https://okky.kr/article/382738">초보가 이해하는 스프링 시큐리티</a>에서 인증과 권한에 개념을 설명하였습니다. </p>
<blockquote>
<p>인증이란 애플리케이션의 작업을 수행할 수 있는 주체(사용자)라고 주장하는 것이며 권한은 인증된 주체가 애플리케이션의 동작을 수행할 수 있도록 허락하는 것이다.</p>
</blockquote>
<p>따라서, 스프링 시큐리티의 보안 아키텍처에서 애플리케이션 사용자는 애플리케이션에 대한 작업을 수행할 수 있는 주체라고 인증하는 것, 애플리케이션은 인증된 주체에 대하여 권한을 제어하는 것을 통해 보안 기능을 적용합니다.</p>
<h3 id="springSecurityFilterChain"><a href="#springSecurityFilterChain" class="headerlink" title="springSecurityFilterChain"></a>springSecurityFilterChain</h3><p>스프링 시큐리티는 <code>springSecurityFilterChain</code>라는 이름의 특별한 필터를 통해 보안을 적용합니다. <code>@EnableWebSecurity</code>을 구성 메타정보 클래스에 선언하면 <code>springSecurityFilterChain</code> 이름의 필터가 빈으로 등록됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>그리고 이 보안 필터를 다른 필터가 수행되기 이전에 처리될 수 있도록 지원하는 DelegatingFilterProxy를 등록하기 위하여 AbstractSecurityWebApplicationInitializer를 클래스 패스에 생성합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityApplicationInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityWebApplicationInitializer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>이제 스프링 프레임워크 기반의 웹 애플리케이션을 실행하면 기본적인 웹 보안이 적용됩니다. 따라서, <a href="http://localhost:8080/">http://localhost:8080</a> 으로 접근하게 되면 접근이 금지되고 인증을 위한 페이지인 <code>/login</code>으로 이동됩니다.</p>
<p><img data-src="https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/images/servlet/architecture/filterchainproxy.png"></p>
<p>위 그림은 FilterChainProxy에 의해 springSecurityFilterChain으로 필터 과정이 위임되는 것을 보여주고 있습니다. 앞선 요청은 위 과정에 의해 springSecurityFilterChain에 등록된 DefaultLoginPageGeneratingFilter에 의해 인증을 위한 로그인 페이지로 이동된 것입니다.</p>
<h4 id="Filter-Debugging"><a href="#Filter-Debugging" class="headerlink" title="Filter Debugging"></a>Filter Debugging</h4><p>springSecurityFilterChain에 의해 수행되는 필터와 처리되는 순서를 알고 싶다면 @EnableWebSecurity를 선언할 때 디버그 모드를 활성화하면 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity(debug = true)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>디버그 모드가 활성화되면 <code>Spring Security Debugger</code>에 의해 다음과 같이 요청 및 처리되는 필터 순서가 출력됩니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[http-nio-8080-exec-1] INFO  Spring Security Debugger(54) - </span><br><span class="line"></span><br><span class="line">************************************************************</span><br><span class="line"></span><br><span class="line">Request received for GET &#39;&#x2F;&#39;:</span><br><span class="line"></span><br><span class="line">org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@353695df</span><br><span class="line"></span><br><span class="line">servletPath:&#x2F;</span><br><span class="line">pathInfo:null</span><br><span class="line">headers: </span><br><span class="line">host: localhost:8080</span><br><span class="line">connection: keep-alive</span><br><span class="line">cache-control: max-age&#x3D;0</span><br><span class="line">upgrade-insecure-requests: 1</span><br><span class="line">user-agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.121 Safari&#x2F;537.36</span><br><span class="line">accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">sec-fetch-site: none</span><br><span class="line">sec-fetch-mode: navigate</span><br><span class="line">sec-fetch-user: ?1</span><br><span class="line">sec-fetch-dest: document</span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: ko-KR,ko;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7</span><br><span class="line">cookie: SESSION&#x3D;YTE0ZTUxODUtMzg0NS00MGMwLWFkOGYtYzFiNDFmYjdkYTMy; io&#x3D;qmiiYVyd26T7GqDfAABF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Security filter chain: [</span><br><span class="line">  WebAsyncManagerIntegrationFilter</span><br><span class="line">  SecurityContextPersistenceFilter</span><br><span class="line">  HeaderWriterFilter</span><br><span class="line">  CsrfFilter</span><br><span class="line">  LogoutFilter</span><br><span class="line">  RequestCacheAwareFilter</span><br><span class="line">  SecurityContextHolderAwareRequestFilter</span><br><span class="line">  AnonymousAuthenticationFilter</span><br><span class="line">  SessionManagementFilter</span><br><span class="line">  ExceptionTranslationFilter</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">************************************************************</span><br></pre></td></tr></table></figure>

<h2 id="Security-Configuration"><a href="#Security-Configuration" class="headerlink" title="Security Configuration"></a>Security Configuration</h2><p>스프링 프레임워크 기반의 웹 애플리케이션에 보안 기능이 적용되었습니다. 그러나, 적용된 보안은 애플리케이션이 요구하는 보안 사항이 아닐 수 있습니다. 그러므로 우리는 스프링 시큐리티의 보안 구성을 변경하여 우리만의 보안을 적용해야합니다.</p>
<h3 id="Authentication-Mechanisms"><a href="#Authentication-Mechanisms" class="headerlink" title="Authentication Mechanisms"></a>Authentication Mechanisms</h3><p>먼저, 애플리케이션에 대한 인증 매커니즘을 구성하는 것부터 시작합니다. 가장 기본적인 인증 프로세스는 폼 로그인입니다. 다시 말해, 사용자 이름과 비밀번호를 제공받아 사용자를 인증하는 것입니다.</p>
<p><img data-src="https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/images/servlet/authentication/unpwd/usernamepasswordauthenticationfilter.png"></p>
<p>위 그림은 스프링 시큐리티 공식 레퍼런스에서 제공하는 폼 로그인이 수행되는 과정을 설명하는 그림입니다. <code>springSecurityFilterChain</code>에 등록된 <code>UsernamePasswordAuthenticationFilter</code>에 의해 <code>UsernamePasswordAuthenticationToken</code>을 생성하여 <code>AuthenticationManager</code>에 의해 인증 여부를 판단하고 있습니다. 만약, 인증에 실패했다면 SecurityContextHolder가 초기화되고 AuthenticationFailureHandler가 호출되고 인증에 성공했다면 SecurityContextHolder에 인증 정보가 설정되고 AuthenticationSuccessHandler가 호출됩니다.</p>
<p>다음은 DefaultLoginPageGeneratingFilter를 대신하여 폼 로그인을 구성하는 예시입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin(form -&gt; &#123;</span><br><span class="line">            form.loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .usernameParameter(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>단, DefaultLoginPageGeneratingFilter이 등록되지 않으므로 <code>/login</code> 경로에 대한 컨트롤러 핸들러 함수를 등록하여야합니다.</p>
<h4 id="In-Memory-Authentication"><a href="#In-Memory-Authentication" class="headerlink" title="In-Memory Authentication"></a>In-Memory Authentication</h4><p>메모리 기반 인증은 가장 간단한 인증 매커니즘입니다. <code>InMemoryUserDetailsManager</code>는 인증 정보를 메모리에 구성할 수 있도록 지원합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserDetails admin = User.builder()</span><br><span class="line">            .username(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    InMemoryUserDetailsManager userDetailsManager = <span class="keyword">new</span> InMemoryUserDetailsManager(admin);</span><br><span class="line"></span><br><span class="line">    UserDetails user = User.builder()</span><br><span class="line">            .username(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">    userDetailsManager.createUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userDetailsManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Database-Authentication"><a href="#Database-Authentication" class="headerlink" title="Database Authentication"></a>Database Authentication</h4><p><code>UserDetailsService</code> 구현체를 만들어서 저장소 기반의 인증 매커니즘을 구성할 수 있습니다. 스프링 시큐리티에는 메모리 기반 인증을 위한 <code>InMemoryUserDetailsManager</code> 또는 JDBC 기반 인증을 위한 <code>JdbcUserDetailsManager</code> 구현체를 제공합니다. 다만, JdbcUserDetailsManager을 위한 테이블 스키마가 정해져있으므로 직접 구성되는 데이터베이스 스키마에 따라 직접 <code>UserDetailsService</code> 구현체를 만드는 것이 좋습니다.</p>
<p>UserDetailsService 구현체는 <code>UserDetails</code>를 반환함으로써 인증 정보를 제공합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">	<span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>우리는 <code>loadUserByUsername()</code>을 오버라이딩하여 저장소에서 정보를 가져와 UserDetails를 반환하도록 코드를 작성하면 됩니다.</p>
<h4 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h4><p>UserDetailsService 구현체에 의해 구성된 인증 매커니즘으로 인증을 수행되는 것에 궁금해할 수 있습니다. 스프링 시큐리티는 인증 매커니즘에 의해 인증을 수행하는 것을 <code>AuthenticationProvider</code> 구현체가 담당합니다. 구현체 중 하나인 <a href="https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/api/org/springframework/security/authentication/dao/DaoAuthenticationProvider.html"><code>DaoAuthenticationProvider</code></a>는 AuthenticationProvider 구현체로 UserDetailsService와 PasswordEncoder를 통해 인증을 수행하게 됩니다.</p>
<h3 id="Configure-HttpSecurity"><a href="#Configure-HttpSecurity" class="headerlink" title="Configure HttpSecurity"></a>Configure HttpSecurity</h3><h4 id="Authorize-Requests"><a href="#Authorize-Requests" class="headerlink" title="Authorize Requests"></a>Authorize Requests</h4><p><code>ExpressionUrlAuthorizationConfigurer</code>는 URL 패턴에 대하여 보안을 적용할 수 있도록 지원합니다.</p>
<p>다음은 모든 경로에 대해 인증 여부를 적용하는 예시입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/**&quot;</span>).authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Session-Management"><a href="#Session-Management" class="headerlink" title="Session Management"></a>Session Management</h4><p><code>SessionManagementConfigurer</code>는 세션과 관련된 보안을 적용할 수 있도록 지원합니다. 예를 들어, 인증된 사용자의 세션이 생성되는 수를 제한하거나 <a href="https://owasp.org/www-community/attacks/Session_fixation"><code>Session Fixation Attack</code></a>을 방지할 수 있습니다.</p>
<p>다음은 사용자의 최대 세션 수를 제한하는 기능을 적용하는 예시입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.sessionManagement(session -&gt; &#123;</span><br><span class="line">            session.maximumSessions(<span class="number">1</span>);</span><br><span class="line">            session.sessionConcurrency(concurrency -&gt; &#123;</span><br><span class="line">                concurrency.maxSessionsPreventsLogin(<span class="keyword">true</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Remember-Me"><a href="#Remember-Me" class="headerlink" title="Remember Me"></a>Remember Me</h4><p><code>RememberMeConfigurer</code>는 로그인 유지 기능을 적용할 수 있도록 지원합니다.</p>
<p>다음은 메모리 기반의 로그인 유지 기능에 대한 예시입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.rememberMe()</span><br><span class="line">            .userDetailsService(userDetailsService())</span><br><span class="line">            .key(<span class="string">&quot;remember-me-key&quot;</span>)</span><br><span class="line">            .rememberMeCookieName(<span class="string">&quot;remember-me&quot;</span>)</span><br><span class="line">            .rememberMeParameter(<span class="string">&quot;remember-me&quot;</span>)</span><br><span class="line">            .tokenRepository(persistentTokenRepository())</span><br><span class="line">            .tokenValiditySeconds((<span class="keyword">int</span>) Duration.ofDays(<span class="number">1</span>).toSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryTokenRepositoryImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="Handling-Logouts"><a href="#Handling-Logouts" class="headerlink" title="Handling Logouts"></a>Handling Logouts</h4><p>보안 기능의 마무리는 애플리케이션에 인증된 주체에 대한 인증 정보를 제거하는 것입니다. 인증 정보를 제거하는 가장 기본적인 프로세스는 로그아웃을 수행하는 것입니다.</p>
<p>기본적으로 springSecurityFilterChain에 등록되는 <code>LogoutPageGeneratingWebFilter</code>는 로그아웃 페이지를 제공합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin(Customizer.withDefaults());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Configure-WebSecurity"><a href="#Configure-WebSecurity" class="headerlink" title="Configure WebSecurity"></a>Configure WebSecurity</h3><h4 id="HttpFirewall"><a href="#HttpFirewall" class="headerlink" title="HttpFirewall"></a>HttpFirewall</h4><p>HttpFirewall은 잠재적 위험을 방지하는 기능을 제공합니다. <code>StrictHttpFirewall</code>는 기본적으로 적용되는 HttpFirewall 구현체로 잠재적인 위협이 있을만한 요청에 대한 URL 패턴이 있을 경우 요청이 거절될 수 있도록 합니다.</p>
<p>다음은 StrictHttpFirewall을 통해 HTTP 메소드를 제한하는 예시입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StrictHttpFirewall <span class="title">httpFirewall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StrictHttpFirewall firewall = <span class="keyword">new</span> StrictHttpFirewall();</span><br><span class="line">        firewall.setAllowedHttpMethods(Arrays.asList(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> firewall;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.httpFirewall(httpFirewall());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Ignoring-Security"><a href="#Ignoring-Security" class="headerlink" title="Ignoring Security"></a>Ignoring Security</h4><p><code>IgnoredRequestConfigurer</code>는 스프링 시큐리티에 의해 보안이 적용되지 않도록 설정할 수 있는 기능을 제공합니다.</p>
<p>예를 들어, 다음과 같이 정적 리소스에 대한 보안을 수행하지 않을 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>스프링 프레임워크 기반의 웹 애플리케이션에 스프링 시큐리티 모듈을 통해 보안을 적용해보았습니다. 스프링 시큐리티는 이외에도 많은 보안 기능을 제공하지만 이 글을 통해 모두 다루어볼 수 없는 점 양해바랍니다.</p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 - 세션 관리</title>
    <url>/docs/spring-web-application-session-management/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<p>스프링 프레임워크는 사용자 세션 정보를 관리하기 위한 API와 구현체를 제공하기 위한 <code>Spring Session</code> 프로젝트를 적용할 수 있습니다. </p>
<ul>
<li>spring-session-core</li>
<li>spring-session-data-jdbc</li>
<li>spring-session-data-redis</li>
</ul>
<h2 id="Session-Management"><a href="#Session-Management" class="headerlink" title="Session Management"></a>Session Management</h2><p>스프링 프레임워크는 <code>spring-session-core</code> 모듈을 통해 사용자의 세션 정보를 관리하기 위한 구현체 및 API를 제공합니다. </p>
<blockquote>
<p>스프링 세션 프로젝트를 적용하는 다양한 예제는 <a href="https://docs.spring.io/spring-session/docs/2.3.0.RELEASE/reference/html5/#samples">Samples and Guides</a>를 참고하시기 바랍니다.</p>
</blockquote>
<h3 id="springSessionRepositoryFilter"><a href="#springSessionRepositoryFilter" class="headerlink" title="springSessionRepositoryFilter"></a>springSessionRepositoryFilter</h3><p>스프링 세션이 Session에 대하여 HttpSession으로 통합하기 위하여 <code>@EnableSpringHttpSession</code>를 구성 메타정보 클래스에 선언합니다. 구성 메타정보에 @EnableSpringHttpSession가 선언되면 <code>springSessionRepositoryFilter</code>라는 이름의 특별한 필터가 빈으로 등록됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableSpringHttpSession</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapSessionRepository <span class="title">sessionRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MapSessionRepository(<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Servlet-Container-Initialization"><a href="#Servlet-Container-Initialization" class="headerlink" title="Servlet Container Initialization"></a>Servlet Container Initialization</h3><p>서블릿 컨테이너 초기화시 springSessionRepositoryFilter를 참조할 수 있도록 루트 애플리케이션 컨텍스트에 등록합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServletInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; AppConfig.class, HttpSessionConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>그리고 서블릿 컨테이너가 모든 요청에 대하여 <code>springSessionRepositoryFilter</code> 필터를 적용할 수 있도록 <code>AbstractHttpSessionApplicationInitializer</code>를 클래스패스에 추가합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionApplicationInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractHttpSessionApplicationInitializer</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 브라우저를 통해 <a href="http://localhost:8080/">http://localhost:8080</a> 에 접근하면 쿠키에 <code>SESSION</code>이라는 속성으로 세션 아이디 값이 부여될 것입니다.</p>
<h2 id="Session-Clustering"><a href="#Session-Clustering" class="headerlink" title="Session Clustering"></a>Session Clustering</h2><p>스프링 프레임워크 기반의 웹 애플리케이션을 분산 환경에서 구동한다면 인증된 사용자의 세션 정보를 모든 애플리케이션 인스턴스에서 동일하게 사용해야합니다. </p>
<p>스프링 세션 프로젝트는 분산 세션 관리를 위해 메모리 기반의 저장소인 Redis를 활용하여 세션을 관리할 수 있도록 <code>spring-session-data-redis</code> 모듈을 제공합니다.</p>
<p>먼저, <a href="https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis/2.3.0.RELEASE"><code>spring-session-data-redis</code></a>와 <a href="https://mvnrepository.com/artifact/io.lettuce/lettuce-core/5.3.3.RELEASE"><code>lettuce-core</code></a> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework.session:spring-session-data-redis:2.3.0.RELEASE&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;io.lettuce:lettuce-core:5.3.3.RELEASE&#x27;</span></span><br></pre></td></tr></table></figure>

<p>application.properties에 Redis 연결 정보를 기술합니다.</p>
<figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure>

<p>구성 메타 정보 클래스에 <code>@EnableRedisHttpSession</code> 선언하면 RedisHttpSessionConfiguration가 추가되면서 <code>springSessionRepositoryFilter</code>라는 필터가 자동으로 빈으로 등록됩니다. 이와 함께 기본적으로 <code>RedisIndexedSessionRepository</code>와 <code>RedisTemplate</code> 그리고 <code>SessionCleanupConfiguration</code>등이 빈으로 등록됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:/application.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfig</span> <span class="keyword">implements</span> <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LettuceConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String hostName = environment.getProperty(<span class="string">&quot;spring.redis.host&quot;</span>, String.class, &quot;localhost&quot;);</span><br><span class="line">        String password = environment.getProperty(<span class="string">&quot;spring.redis.password&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">int</span> port = environment.getProperty(<span class="string">&quot;spring.redis.port&quot;</span>, Integer.class, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        LettuceConnectionFactory connectionFactory = <span class="keyword">new</span> LettuceConnectionFactory();</span><br><span class="line">        RedisStandaloneConfiguration standaloneConfiguration = connectionFactory.getStandaloneConfiguration();</span><br><span class="line">        standaloneConfiguration.setHostName(hostName);</span><br><span class="line">        standaloneConfiguration.setPassword(password);</span><br><span class="line">        standaloneConfiguration.setPort(port);</span><br><span class="line">        <span class="keyword">return</span> connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Redis 저장소 접근을 위해 Lettuce를 사용하도록 <code>LettuceConnectionFactory</code>를 빈으로 등록하였습니다.</p>
</blockquote>
<p>이제 웹 애플리케이션을 다시 실행하여도 종료하기전에 사용하던 세션 정보는 Redis에 저장되어있어 세션 정보를 유지할 수 있습니다.</p>
<hr>
<p>이제 여러분은 애플리케이션 사용자의 세션을 관리할 수 있고 분산 환경의 애플리케이션인 경우 Redis와 같은 저장소를 활용하여 관리할 수 있음을 알게되었습니다.</p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 - 단위 테스트</title>
    <url>/docs/spring-web-application-testing/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<p>스프링 프레임워크 기반의 웹 애플리케이션을 개발하기 위해서 매번 애플리케이션을 실행하는 것은 불편함이 있습니다. 전체적인 웹 애플리케이션의 동작을 확인하는 것이 아니라면 개발하는 로직의 단위 테스트를 수행하여 개발하는 것이 좋습니다.</p>
<p>스프링 프레임워크는 애플리케이션 테스트를 위한 <a href="https://mvnrepository.com/artifact/org.springframework/spring-test/5.2.8.RELEASE"><code>spring-test</code></a> 모듈을 제공합니다.</p>
<p>이번 글에서는 스프링 테스트 모듈을 통해 간단하게 단위 테스트를 수행하는 것에 대해 알아봅니다. 테스트에 대한 자세한 내용은 <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/testing.html">공식 레퍼런스</a>를 참고하세요.</p>
<h2 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h2><p>스프링 테스트 모듈을 활용하면 서비스 계층 클래스를 테스트 및 개발을 쉽게 수행할 수 있습니다. </p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">testCompile <span class="string">&#x27;org.springframework:spring-test:5.2.8.RELEASE&#x27;</span></span><br><span class="line">testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Spring-JUnit-4-Runner"><a href="#Spring-JUnit-4-Runner" class="headerlink" title="Spring JUnit 4 Runner"></a>Spring JUnit 4 Runner</h3><p>스프링 테스트 컨테스트 프레임워크는 JUnit4으로 테스트를 수행할 수 있도록 SpringJUnit4ClassRunner를 제공합니다.</p>
<p><code>@RunWith</code>를 선언하여 JUnit으로 테스트를 수행할 <code>SpringJUnit4ClassRunner</code>를 지정할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// test logic...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Testing-Annotations"><a href="#Testing-Annotations" class="headerlink" title="Testing Annotations"></a>Testing Annotations</h3><p>스프링 테스트 모듈은 애플리케이션 테스트를 위한 어노테이션을 제공합니다.</p>
<p>다음 예제는 스프링 테스트 모듈이 제공하는 어노테이션으로 이메일 발송에 대한 테스트 코드를 작성한 것입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;MailConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@ActiveProfiles(&#123;&quot;test&quot;&#125;)</span></span><br><span class="line"><span class="meta">@TestPropertySource(properties = &#123; &quot;mail.username = username@gmail.com&quot;, &quot;mail.password: password&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailService mailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException, IOException, TemplateException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Mambo&quot;</span>);</span><br><span class="line">        variables.put(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;This mail is sent for testing.&quot;</span>);</span><br><span class="line">        MimeMessage mimeMessage = mailService.getMimeMessage(<span class="string">&quot;username@gmail.com&quot;</span>, <span class="string">&quot;Send test mail&quot;</span>, variables);</span><br><span class="line">        <span class="keyword">boolean</span> status = mailService.sendMail(mimeMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@ContextConfiguration는 테스트 컨텍스트를 구성하기 위한 메타정보 클래스를 지정할 수 있습니다.</li>
<li>@ActiveProfiles는 테스트 컨텍스트에 적용할 프로파일 지정할 수 있습니다.</li>
<li>@TestPropertySource는 테스트 컨텍스트에 적용되는 프로퍼티를 임의로 설정할 수 있도록 지원합니다.</li>
<li>@DirtiesContext는 테스트가 실행되는 동안 변경되는 테스트 컨텍스트에 대한 캐시를 제거할 수 있는 방법을 지원합니다.</li>
<li>@ContextHierarchy는 테스트 컨텍스트에 대해 계층 구조를 갖게 할 수 있습니다.</li>
</ul>
<h2 id="Spring-MVC-Test"><a href="#Spring-MVC-Test" class="headerlink" title="Spring MVC Test"></a>Spring MVC Test</h2><p>스프링 테스트 모듈에는 스프링 웹 MVC 테스트를 위한 기능이 포함되어 있습니다. <code>JUnit</code> 또는 <code>TestNG</code>를 사용하여 컨트롤러에 대한 테스트를 작성할 수 있습니다.</p>
<h3 id="WebAppConfiguration"><a href="#WebAppConfiguration" class="headerlink" title="@WebAppConfiguration"></a>@WebAppConfiguration</h3><p><code>@WebAppConfiguration</code>을 선언하여 테스트를 위한 웹 애플리케이션 컨텍스트를 구성할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@ContextHierarchy(&#123;</span></span><br><span class="line"><span class="meta">    @ContextConfiguration(classes = &#123;AppConfig.class&#125;),</span></span><br><span class="line"><span class="meta">    @ContextConfiguration(classes = &#123;WebConfig.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(wac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MockMvc"><a href="#MockMvc" class="headerlink" title="MockMvc"></a>MockMvc</h3><p>스프링 테스트 모듈에는 <code>Servlet API</code>에 대한 모의 구현체가 포함되어 있습니다. <code>모의 구현체</code>를 활용하여 웹 애플리케이션 테스트를 수행할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@ContextHierarchy(&#123;</span></span><br><span class="line"><span class="meta">    @ContextConfiguration(classes = &#123;AppConfig.class&#125;),</span></span><br><span class="line"><span class="meta">    @ContextConfiguration(classes = &#123;WebConfig.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext wac;</span><br><span class="line">    <span class="keyword">protected</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(mockMvc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>스프링 프레임워크에서 제공하는 스프링 테스트 모듈을 사용하면 단위 테스트 뿐만 아니라 웹 애플리케이션을 구동하지 않아도 테스트를 위한 애플리케이션 컨텍스트를 구성할 수 있음을 확인하였습니다. </p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 만들기</title>
    <url>/docs/building-web-application-with-spring-framework/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<p>지난 글에서 우리는 스프링 프레임워크의 기본이 되는 개념인 IoC 컨테이너라는 애플리케이션 컨텍스트에 대해 배웠습니다. 이번 글에서는 스프링 프레임워크 기반의 웹 애플리케이션을 구성하고 실행하는 방법에 대해서 다루겠습니다.</p>
<h2 id="Web-on-Servlet-Stack"><a href="#Web-on-Servlet-Stack" class="headerlink" title="Web on Servlet Stack"></a>Web on Servlet Stack</h2><p>스프링 5 부터 웹 애플리케이션이 동작하는 방식이 기존의 서블릿 API를 사용하는 서블릿 스택과 <a href="https://www.reactive-streams.org/">Reactive Streams</a> 스펙 기반의 <a href="https://projectreactor.io/">리액티브</a> 스택이 있습니다. 리액티브 스택은 블로킹 기반의 서블릿 스택과 달리 논-블로킹이라는 특징이 있습니다. 리액티브 스택의 웹 애플리케이션을 개발하기 위해서는 우선적으로 비동기 프로그래밍을 배워야하므로 많은 개발자들에게 익숙한 서블릿 스택 기반의 웹 애플리케이션을 만들어보도록 합니다.</p>
<p>서블릿 스택 기반의 웹 애플리케이션을 만들기 위해 <a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc/5.2.8.RELEASE"><code>spring-webmvc</code></a>와 <code>javax.servlet-api</code> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework:spring-webmvc:5.2.8.RELEASE&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;javax.servlet:javax.servlet-api:4.0.1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>자바 웹 애플리케이션을 Tomcat과 같은 웹 컨테이너를 통해 실행할 경우 웹 컨테이너는 클래스패스에 위치한 <a href="https://cloud.google.com/appengine/docs/flexible/java/configuring-the-web-xml-deployment-descriptor?hl=ko"><code>web.xml</code></a>이라는 배포 설명자 파일을 참조합니다. 스프링 프레임워크의 <code>spring-web</code> 모듈에는 배포 설명자 파일인 web.xml을 자바 코드로 대체할 수 있는 특별한 인터페이스를 제공합니다.</p>
<h3 id="WebApplicationInitializer"><a href="#WebApplicationInitializer" class="headerlink" title="WebApplicationInitializer"></a>WebApplicationInitializer</h3><p>웹 컨테이너에서 가장 먼저 참조하는 배포 설명자를 구성하기 위하여 <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/web/WebApplicationInitializer.html"><code>WebApplicationInitializer</code></a> 인터페이스에 대한 구현체를 생성할 수 있습니다.</p>
<p>웹 컨테이너가 실행될 때 클래스패스에 위치한 web.xml 파일이 존재하지 않을 경우 WebApplicationInitializer를 감지하여 web.xml로 대체하여 사용하게 됩니다. 정말로 WebApplicationInitializer로 web.xml을 대체할 수 있는지 확인해봅시다.</p>
<p>우선 다음과 같이 WebApplicationInitializer 구현체를 클래스패스에 생성합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServletInitializer</span> <span class="title">implementation</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigWebApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">        applicationContext.setConfigLocation(<span class="string">&quot;com.example.demo.config&quot;</span>);</span><br><span class="line">        servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(applicationContext));</span><br><span class="line">        ServletRegistration.Dynamic dispatcher = servletContext.addServlet(<span class="string">&quot;dispatcher&quot;</span>, <span class="keyword">new</span> DispatcherServlet(applicationContext));</span><br><span class="line">        dispatcher.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        dispatcher.addMapping(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 자바 코드는 아래의 web.xml을 기술한 것과 같다고 볼 수 있습니다.</p>
<figure class="highlight xml"><figcaption><span>web.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/application-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring/application-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>위 예제는 <code>단일 애플리케이션 컨텍스트</code>로 동작하는 웹 애플리케이션을 구성합니다. 그러나 대부분의 web.xml에 대한 예제를 찾아보면 <code>루트 애플리케이션 컨텍스트</code>와 디스패처 서블릿이 참조하는 <code>서블릿 컨텍스트</code>를 구분하여 구성한 것이 많습니다. 스프링 프레임워크는 단일 애플리케이션 컨텍스트 구조 뿐만 아니라 루트 애플리케이션 컨텍스트와 서블릿 애플리케이션 컨텍스트를 나누어 컨텍스트 계층을 구성할 수 있는 특별한 <code>AbstractAnnotationConfigDispatcherServletInitializer</code> 클래스를 제공합니다.</p>
<p>AbstractAnnotationConfigDispatcherServletInitializer가 클래스패스에 위치하는 경우 다음과 같은 구조로 웹 애플리케이션을 구성할 수 있습니다.<br><img data-src="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/images/mvc-context-hierarchy.png"></p>
<p>위 그림은 스프링 프레임워크 공식 레퍼런스에서 제공하는 <code>다중 컨텍스트 계층</code>을 표현합니다. 웹과 관련된 빈 클래스들은 서블릿 웹 애플리케이션 컨텍스트에서 관리되며 루트 애플리케이션 컨텍스트에는 웹과 관련이 없거나 공통적으로 사용되는 빈 클래스들을 관리하도록 합니다.</p>
<p>다음 예제 코드는 AbstractAnnotationConfigDispatcherServletInitializer를 적용하는 예시입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServletInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; AppConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; WebConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>루트 애플리케이션 컨텍스트가 참조하는 구성 메타정보는 <code>getRootConfigClasses</code>에서 반환합니다. 그리고 서블릿 애플리케이션 컨텍스트에서 참조하는 구성 메타정보는 <code>getServletConfigClasses</code>에서 반환합니다. 따라서, 위 예제 코드에서는 루트 애플리케이션 컨텍스트는 AppConfig 클래스에 등록된 빈 클래스들을 관리하게 되고 WebConfig 클래스에 등록된 빈 클래스들은 서블릿 애플리케이션 컨텍스트를 통해 관리됩니다. </p>
<blockquote>
<p>이때 만들어지는 디스패처 서블릿은 dispatcher라는 이름을 기본으로 사용합니다.</p>
</blockquote>
<p>따라서, 다중 애플리케이션 컨텍스트 계층으로 웹 애플리케이션을 구성한다면 루트 애플리케이션 컨텍스트와 서블릿 애플리케이션 컨텍스트에서 관리해야할 빈들을 잘 구분하여 등록하여 사용하는 것이 좋습니다.</p>
<p>이제 웹 컨테이너에서 읽어야할 배포 설명자인 WebApplicationInitializer가 준비되었으므로 웹 애플리케이션을 구동할 수 있습니다. 저는 임베디드 톰캣 모듈을 통하여 쉽게 애플리케이션을 구동하는 방법을 설명하도록 하겠습니다.</p>
<h3 id="Embedded-Tomcat"><a href="#Embedded-Tomcat" class="headerlink" title="Embedded Tomcat"></a>Embedded Tomcat</h3><p>임베디드 톰캣으로 애플리케이션을 실행하기 위하여 <code>tomcat-embed-core</code>와 <code>tomcat-embed-jasper</code> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.apache.tomcat.embed:tomcat-embed-core:9.0.37&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.apache.tomcat.embed:tomcat-embed-jasper:9.0.37&#x27;</span></span><br></pre></td></tr></table></figure>

<p>SpringApplication에서 톰캣 서버를 실행하도록 다음과 같이 코드를 작성합니다. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">        tomcat.setBaseDir(<span class="string">&quot;out/webapp&quot;</span>);</span><br><span class="line">        Connector connector = tomcat.getConnector();</span><br><span class="line">        connector.setURIEncoding(StandardCharsets.UTF_8.displayName());</span><br><span class="line"></span><br><span class="line">        tomcat.addWebapp(<span class="string">&quot;&quot;</span>, <span class="keyword">new</span> File(<span class="string">&quot;src/main/webapp&quot;</span>).getAbsolutePath());</span><br><span class="line">        tomcat.setPort(<span class="number">8080</span>);</span><br><span class="line">        tomcat.start();</span><br><span class="line">        tomcat.getServer().await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 SpringApplication을 실행하고 로그를 확인합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="number">9</span>월 <span class="number">11</span>, <span class="number">2020</span> <span class="number">10</span>:<span class="number">39</span>:<span class="number">10</span> 오후 org.apache.catalina.startup.ContextConfig getDefaultWebXmlFragment</span><br><span class="line">정보: No global web.xml found</span><br><span class="line"><span class="number">9</span>월 <span class="number">11</span>, <span class="number">2020</span> <span class="number">10</span>:<span class="number">39</span>:<span class="number">11</span> 오후 org.apache.catalina.core.ApplicationContext log</span><br><span class="line">정보: <span class="number">1</span> Spring WebApplicationInitializers detected on classpath</span><br><span class="line">...</span><br><span class="line"><span class="number">9</span>월 <span class="number">11</span>, <span class="number">2020</span> <span class="number">10</span>:<span class="number">39</span>:<span class="number">12</span> 오후 org.apache.coyote.AbstractProtocol start</span><br><span class="line">정보: Starting ProtocolHandler [<span class="string">&quot;http-nio-8080&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>출력된 로그를 살펴보면 Spring WebApplicationInitializers detected on classpath 에서 확인할 수 있듯이 클래스패스에 있는 WebApplicationInitializer를 web.xml으로 사용하였습니다.</p>
<p>톰캣이 웹 애플리케이션을 정상적으로 구동하였으므로 브라우저를 통해 <a href="http://localhost:8080/">http://localhost:8080</a> 로 접속해보겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">경고: No mapping <span class="keyword">for</span> GET /</span><br></pre></td></tr></table></figure>

<p>이런… 디스패처 서블릿이 처리를 위임할 서블릿을 찾을 수 없어 경고 메시지가 출력되었고 브라우저에서는 응답 없음을 확인할 수 있습니다. 이제 우리가 알아야할 것은 웹 요청을 처리할 서블릿을 스프링 프레임워크가 제공하는 클래스로 구성하는 것입니다.</p>
<h3 id="Annotated-Controllers"><a href="#Annotated-Controllers" class="headerlink" title="Annotated Controllers"></a>Annotated Controllers</h3><p>스프링 웹 MVC 모듈은 웹 요청을 처리할 컴포넌트를 만들 수 있는 어노테이션을 제공합니다. 스프링 프레임워크에서 웹 요청을 처리하는 컴포넌트를 컨트롤러라고 합니다. 그리고 컨트롤러라는 것을 <code>@Controller</code>와 <code>@RestController</code>를 선언하여 나타낼 수 있습니다. </p>
<p>컨트롤러는 웹 관련 빈 클래스이므로 서블릿 웹 애플리케이션 컨텍스트의 구성 메타정보인 <code>WebConfig</code>에 등록하겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.example.demo.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>@ComponentScan</code>을 선언하였으므로 <code>com.example.demo.controller</code> 패키지에 있는 컨트롤러 컴포넌트들은 서블릿 애플리케이션 컨텍스트에서 관리됩니다. </p>
<p>다음과 같이 <code>HomeController</code>라는 컨트롤러를 만들어 웹 요청을 처리할 <code>핸들러 함수</code>를 만들겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">home</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 SpringApplication을 실행하면 디스패처 서블릿이 웹 요청에 대해 처리할 컨트롤러를 찾아 위임하여 HTTP 요청을 처리하고 응답을 받게됩니다. </p>
<p><code>Hello World</code>라는 문자열이 브라우저에 표시되었나요?</p>
<p>대부분의 스프링 애플리케이션 예제와 달리 컨트롤러의 핸들러 함수에서 “Hello World”를 반환하지 않는지 궁금해 해야합니다. 저는 어떤 지식을 공부할 때에는 궁금한게 많아야한다고 생각하는 편입니다. 왜 HttpServletResponse에서 <code>PrintWriter</code>를 가져와 문자열을 출력했는지는 공식 레퍼런스를 살펴보면 찾을 수 있습니다.</p>
<p>우선 컨트롤러 컴포넌트를 만들때 사용하는 것들에 대해 알아보면서 설명하겠습니다.</p>
<h4 id="Request-Mapping"><a href="#Request-Mapping" class="headerlink" title="Request Mapping"></a>Request Mapping</h4><p>가장 먼저 <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-requestmapping"><code>@RequestMapping</code></a>은 선언된 핸들러 함수가 어떻게 웹 요청을 처리할지 결정할 수 있습니다. 예를 들어, 특정 URL, 파라미터, 헤더, 미디어 타입에 따라 처리할 요청을 구분할 수 있습니다. 위 예제에서 선언된 <code>@GetMapping</code>은 이 @RequestMapping에 대해 HTTP 메소드에 따라 확장한 어노테이션 중 하나입니다.</p>
<ul>
<li>@GetMapping</li>
<li>@PostMapping</li>
<li>@PutMapping</li>
<li>@DeleteMapping</li>
</ul>
<p>만약, 컨트롤러에서 처리하는 함수가 여러가지 HTTP 메소드를 지원하는 경우가 아니라면 HTTP 메소드에 따라 확장된 어노테이션을 선언하는 것이 가독성에 이점이 있습니다.</p>
<h4 id="Handler-Methods"><a href="#Handler-Methods" class="headerlink" title="Handler Methods"></a>Handler Methods</h4><p>컨트롤러에 선언된 핸들러 함수는 여러가지 <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-arguments">매개변수</a>를 지정할 수 있습니다.</p>
<p>위 예제 코드에서 HttpServletRequest와 HttpServletResponse도 매개변수로 받을 수 있는 클래스 중 하나입니다. </p>
<h4 id="Return-Values"><a href="#Return-Values" class="headerlink" title="Return Values"></a>Return Values</h4><p>앞서 핸들러 함수에서 void 형식을 반환한 이유를 여기서 확인할 수 있습니다. 컨트롤러의 핸들러 함수는 반환할 수 있는 형식이 정해져 있습니다. 예를 들어, 컨트롤러에 선언된 핸들러 함수가 <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-ann-return-types">반환하는 유형</a> 중 <code>String</code>은 문자열을 응답하는 것이 아니라 스프링 프레임워크에서 사용하는 <code>뷰(View)</code>라는 응답 객체의 이름을 지정하는 것으로 정해져있습니다. </p>
<p>따라서, “Hello World”라는 문자열을 응답으로 출력 위하여 String 형식으로 반환하였다면 디스패처 서블릿은 응답을 위해 Hello Wolrd라는 이름을 가진 뷰를 찾게됩니다. 디스패처 서블릿은 결국 요청을 처리할 수 없다고 판단합니다.</p>
<p>다음 처럼 말이죠.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">경고: No mapping <span class="keyword">for</span> GET /Hello World</span><br></pre></td></tr></table></figure>

<p>스프링 웹 MVC는 핸들러 함수에서 반환하는 유형에 따라 응답해야하는 것을 구분하기 위하여 <code>ViewResolver</code> 인터페이스를 통해 수행합니다. 기본적으로 ViewResolver에 대한 설정이 존재하지 않으면 <code>InternalResourceViewResolver</code>를 사용하게 됩니다. 여기서 확인할 수 있는 점은 우리가 원하는 형식으로 응답하기 위해서는 ViewResolver에 대한 설정을 해야한다는 것입니다.</p>
<p>다음의 ViewResolver에 대해서 찾아보시기를 추천합니다.</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html">ContentNegotiatingViewResolver</a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/web/servlet/view/InternalResourceViewResolver.html">InternalResourceViewResolver</a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/web/servlet/view/freemarker/FreeMarkerViewResolver.html">FreeMarkerViewResolver</a></li>
</ul>
<h2 id="Template-Engine"><a href="#Template-Engine" class="headerlink" title="Template Engine"></a>Template Engine</h2><p>위에서 언급한 ViewResolver 중 <code>FreeMarkerViewResolver</code>는 프리마커 템플릿 엔진을 사용하여 HTML을 응답하기 위한 설정을 할 때 사용할 수 있습니다. 웹 애플리케이션의 목표는 웹 요청을 처리하여 응답하는 것이며 HTML 형식으로 응답하는 것은 중요한 부분입니다.</p>
<p>스프링 웹 MVC에서 기본적으로 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/web/servlet/view/InternalResourceViewResolver.html"><code>InternalResourceViewResolver</code></a>을 사용하여 뷰를 응답한다고 하였습니다. 이 InternalResourceViewResolver는 UrlBasedViewResolver를 확장한 클래스로 Servlet이나 JSP와 같은 <code>InternalResourceView</code> 또는 <code>JstlView</code>를 응답으로 사용하게 됩니다.</p>
<p>예를 들어, 다음과 같이 컨트롤러 핸들러 함수에서 <code>index</code>라는 뷰 이름을 반환합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>그러면 InternalResourceViewResolver에 의해 InternalResourceView로 판단하고 <code>/index</code>라는 경로로 요청이 <code>포워딩</code> 됩니다.</p>
<blockquote>
<p>여기서 포워딩 되는 이유는 InternalResourceViewResolver가 UrlBasedViewResolver를 기반으로 하기 때문입니다.</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2020-09-13 08:19:33 [http-nio-8080-exec-1] DEBUG o.s.w.s.DispatcherServlet(91) - GET <span class="string">&quot;/&quot;</span>, parameters=&#123;&#125;</span><br><span class="line">2020-09-13 08:19:33 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping(414) - Mapped to com.example.demo.controller.HomeController<span class="comment">#index(HttpServletRequest, HttpServletResponse)</span></span><br><span class="line">2020-09-13 08:19:33 [http-nio-8080-exec-1] DEBUG o.s.w.s.v.InternalResourceView(309) - View name <span class="string">&#x27;index&#x27;</span>, model &#123;&#125;</span><br><span class="line">2020-09-13 08:19:33 [http-nio-8080-exec-1] DEBUG o.s.w.s.v.InternalResourceView(169) - Forwarding to [index]</span><br><span class="line">2020-09-13 08:19:33 [http-nio-8080-exec-1] DEBUG o.s.w.s.DispatcherServlet(91) - <span class="string">&quot;FORWARD&quot;</span> dispatch <span class="keyword">for</span> GET <span class="string">&quot;/index&quot;</span>, parameters=&#123;&#125;</span><br><span class="line">2020-09-13 08:19:33 [http-nio-8080-exec-1] WARN  o.s.w.s.PageNotFound(1251) - No mapping <span class="keyword">for</span> GET /index</span><br><span class="line">2020-09-13 08:19:33 [http-nio-8080-exec-1] DEBUG o.s.w.s.DispatcherServlet(1127) - Exiting from <span class="string">&quot;FORWARD&quot;</span> dispatch, status 404</span><br><span class="line">2020-09-13 08:19:33 [http-nio-8080-exec-1] DEBUG o.s.w.s.DispatcherServlet(1131) - Completed 404 NOT_FOUND</span><br></pre></td></tr></table></figure>

<p>결과적으로 우리는 클래스패스에 HTML 파일을 생성하였다고 해서 응답할 수 없습니다.</p>
<h3 id="FreeMarkerViewResolver"><a href="#FreeMarkerViewResolver" class="headerlink" title="FreeMarkerViewResolver"></a>FreeMarkerViewResolver</h3><p>스프링 프레임워크 애플리케이션을 개발하는 대부분의 개발자들은 JSP를 사용해왔습니다. 그러나 최근에는 JSP 보다는 Thymeleaf 또는 FreeMarker 같은 템플릿 엔진을 선호합니다. 그래서 스프링 부트 프로젝트에서는 기본적으로 JSP에 대한 의존성을 지원하지 않고 있습니다. JSP를 원하는 개발자들이 서운해할 수 있지만 프리마커 템플릿 엔진을 사용하여 HTML을 응답해보도록 하겠습니다.</p>
<p><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/javadoc-api/org/springframework/web/servlet/view/freemarker/FreeMarkerViewResolver.html"><code>FreeMarkerViewResolver</code></a>는 <code>FreeMarkerView</code> 클래스를 뷰로 응답할 수 있도록 지원합니다. 즉, 프리마커 템플릿 엔진을 사용하여 웹 요청을 HTML 형식으로 응답할 수 있게 되는 것입니다.</p>
<p>먼저, 프리마커 템플릿 엔진을 사용하기 위해 <a href="https://mvnrepository.com/artifact/org.freemarker/freemarker/2.3.30"><code>freemarker</code></a>와 <code>spring-context-support</code> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.freemarker:freemarker:2.3.30&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.springframework:spring-context-support:5.2.8.RELEASE&#x27;</span></span><br></pre></td></tr></table></figure>

<p>서블릿 컨텍스트 메타정보 클래스에 <code>FreeMarkerViewResolver</code>와 <code>FreeMarkerConfigurer</code>를 빈으로 등록합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.example.demo.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FreeMarkerViewResolver <span class="title">freemarkerViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FreeMarkerViewResolver viewResolver = <span class="keyword">new</span> FreeMarkerViewResolver();</span><br><span class="line">        viewResolver.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setCache(<span class="keyword">false</span>);</span><br><span class="line">        viewResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FreeMarkerConfigurer <span class="title">freemarkerConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FreeMarkerConfigurer freeMarkerConfigurer = <span class="keyword">new</span> FreeMarkerConfigurer();</span><br><span class="line">        freeMarkerConfigurer.setTemplateLoaderPath(<span class="string">&quot;classpath:/templates/&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> freeMarkerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 애플리케이션을 실행하면 FreeMarkerViewResolver와 FreeMarkerConfigurer를 빈으로 등록하는 로그가 출력되었습니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-13 09:36:59 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;freemarkerViewResolver&#39;</span><br><span class="line">2020-09-13 09:36:59 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;freemarkerConfig&#39;</span><br><span class="line">2020-09-13 09:36:59 [main] DEBUG o.s.w.s.v.f.FreeMarkerConfigurer(347) - Template loader path [class path resource [templates&#x2F;]] resolved to file path [C:\Users\Mambo\git\spring5\out\production\resources\templates]</span><br></pre></td></tr></table></figure>

<p>이제 <a href="http://localhost:8080에">http://localhost:8080에</a> 대해 웹 요청이 들어오면 <code>/templates/index.html</code>을 <code>FreeMarkerView</code>로 응답하게 됩니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-13 09:38:10 [http-nio-8080-exec-2] DEBUG o.s.w.s.DispatcherServlet(91) - GET &quot;&#x2F;&quot;, parameters&#x3D;&#123;&#125;</span><br><span class="line">2020-09-13 09:38:10 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping(414) - Mapped to com.example.demo.controller.HomeController#index(HttpServletRequest, HttpServletResponse)</span><br><span class="line">2020-09-13 09:38:10 [http-nio-8080-exec-2] DEBUG o.s.w.s.v.f.FreeMarkerView(309) - View name &#39;index&#39;, model &#123;&#125;</span><br><span class="line">2020-09-13 09:38:10 [http-nio-8080-exec-2] DEBUG o.s.w.s.v.f.FreeMarkerView(176) - Rendering [index.html]</span><br><span class="line">2020-09-13 09:38:10 [http-nio-8080-exec-2] DEBUG o.s.w.s.DispatcherServlet(1131) - Completed 200 OK</span><br></pre></td></tr></table></figure>

<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>FreeMarker도 템플릿 엔진이므로 Model에 값을 넣어 표시할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Model model)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 다음과 같이 Model에 message 속성을 index.html 템플릿에서 사용할 수 있습니다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>$&#123;message&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Logging-System"><a href="#Logging-System" class="headerlink" title="Logging System"></a>Logging System</h2><p>스프링 프레임워크는 <a href="https://mvnrepository.com/artifact/org.springframework/spring-jcl"><code>spring-jcl</code></a> 모듈을 통해 <code>SLF4J</code>와 같은 다양한 로깅에 대한 추상화를 지원합니다. 따라서, 스프링 프레임워크 기반의 웹 애플리케이션에서 로그 출력을 위한 기능은 쉽게 적용할 수 있습니다.</p>
<p><code>slf4j-api</code> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.slf4j:slf4j-api:1.7.30&#x27;</span></span><br><span class="line"><span class="comment">// implementation &#x27;org.slf4j:slf4j-simple:1.7.30&#x27;</span></span><br></pre></td></tr></table></figure>

<p>SLF4J는 로거 추상화로 구현체를 아직 추가하지 않았기 때문에 다음과 같은 로그가 출력됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span>월 <span class="number">12</span>, <span class="number">2020</span> <span class="number">4</span>:<span class="number">21</span>:<span class="number">31</span> 오후 org.apache.jasper.servlet.TldScanner scanJars</span><br><span class="line">정보: At least one JAR was scanned <span class="keyword">for</span> TLDs yet contained no TLDs. Enable debug logging <span class="keyword">for</span> <span class="keyword">this</span> logger <span class="keyword">for</span> a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.</span><br><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http:<span class="comment">//www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span></span><br></pre></td></tr></table></figure>

<p>가장 기본적인 <code>slf4j-simple</code> 의존성을 추가하면 정상적으로 스프링 프레임워크에 대한 로그가 출력됩니다.</p>
<h3 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h3><p>slf4j-simple로 출력되는 로그 보다는 <a href="http://logback.qos.ch/"><code>Logback</code></a>과 같은 SLF4J 구현체를 사용하는 것이 좋습니다.</p>
<p>다음 <code>logback-classic</code> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;ch.qos.logback:logback-classic:1.2.3&#x27;</span></span><br></pre></td></tr></table></figure>

<p>클래스패스에 <code>logback.xml</code> 파일을 생성하고 로그백으로 로그를 출력하기 위한 설정을 기술합니다.</p>
<figure class="highlight"><figcaption><span>logback.xml</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;appender name=<span class="string">&quot;STDOUT&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %highlight(%-5level) %cyan(%logger&#123;25&#125;\(%line\)) - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=<span class="string">&quot;debug&quot;</span>&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>이제 애플리케이션을 실행하면 웹 애플리케이션에 대한 로그가 다음과 같이 출력됩니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-12 16:58:11 [main] INFO  o.s.w.s.DispatcherServlet(525) - Initializing Servlet &#39;dispatcher&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.w.c.s.AnnotationConfigWebApplicationContext(596) - Refreshing WebApplicationContext for namespace &#39;dispatcher-servlet&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.w.c.s.AnnotationConfigWebApplicationContext(217) - Registering component classes: [class com.example.demo.config.WebConfig]</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;org.springframework.context.event.internalEventListenerProcessor&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;org.springframework.context.event.internalEventListenerFactory&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;org.springframework.context.annotation.internalCommonAnnotationProcessor&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.u.c.s.UiApplicationContextUtils(85) - Unable to locate ThemeSource with name &#39;themeSource&#39;: using default [org.springframework.ui.context.support.DelegatingThemeSource@7741507c]</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;webConfig&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory(217) - Creating shared instance of singleton bean &#39;homeController&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping(351) - 1 mappings in &#39;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&#39;</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerAdapter(611) - ControllerAdvice beans: none</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver(294) - ControllerAdvice beans: none</span><br><span class="line">2020-09-12 16:58:11 [main] DEBUG o.s.w.s.DispatcherServlet(542) - enableLoggingRequestDetails&#x3D;&#39;false&#39;: request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data</span><br><span class="line">2020-09-12 16:58:11 [main] INFO  o.s.w.s.DispatcherServlet(547) - Completed initialization in 165 ms</span><br></pre></td></tr></table></figure>

<hr>
<p>이번 글을 통해 스프링 프레임워크 기반의 웹 애플리케이션을 만들고 실행하는 법에 대해서 알게 되었습니다. 스프링 MVC 모듈은 <a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/web.html#mvc-config"><code>MVC Configuration</code></a>을 위한 클래스를 추가적으로 제공합니다. 다음 글에서는 MVC Configuration을 통해 스프링 프레임워크 기반의 웹 애플리케이션에 대한 기능을 좀 더 확장해보겠습니다.</p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 구성 확장하기</title>
    <url>/docs/configure-spring-web-application/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<p>지난 글에서 우리는 스프링 프레임워크 기반의 웹 애플리케이션을 만들고 임베디드 톰캣으로 웹 애플리케이션을 실행해보았습니다. 아직은 웹 애플리케이션에 대해 설정한 것이 없습니다. 그래서 이번에는 <a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc/5.2.8.RELEASE"><code>spring-webmvc</code></a>에 포함된 <code>MVC Configuration</code>을 통해 웹 애플리케이션에 대한 설정을 확장해나가도록 하겠습니다.</p>
<h2 id="MVC-Configuration"><a href="#MVC-Configuration" class="headerlink" title="MVC Configuration"></a>MVC Configuration</h2><p>스프링 프레임워크에서 제공하는 MVC Configuration 기능을 활성화하기 위해서 <code>@EnableWebMvc</code>를 웹 애플리케이션 컨텍스트 메타 정보 클래스에 선언해야 합니다. @EnableWebMvc가 선언된 경우 애플리케이션 컨텍스트에 <code>WebMvcConfigurationSupport</code> 클래스가 자동으로 포함됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.example.demo.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>사실 @EnableWebMvc으로 추가되는 클래스는 WebMvcConfigurationSupport를 확장한 <code>DelegatingWebMvcConfiguration</code>입니다. 이 클래스는 스프링 웹 MVC 애플리케이션을 위한 기본 구성을 제공하기도 하며 애플리케이션 컨텍스트에 존재하는 <code>WebMvcConfigurer</code> 구현체를 감지하여 설정을 변경할 수 있도록 위임합니다.</p>
<h3 id="MVC-Config-API"><a href="#MVC-Config-API" class="headerlink" title="MVC Config API"></a>MVC Config API</h3><p>스프링 웹 MVC에서 제공하는 설정은 <code>WebMvcConfigurer</code> 인터페이스를 통해 변경할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.example.demo.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>WebMvcConfigurer 인터페이스에서 제공하는 함수를 통해 변경할 수 있는 기능에 대해서 하나씩 알아보도록 합시다.</p>
<h3 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h3><p>가장 먼저, <a href="https://beanvalidation.org/"><code>Bean Validation</code></a>으로 도메인 모델에 대한 검증을 수행할 수 있도록 <code>Vailidator</code>에 대한 추상화를 지원합니다. </p>
<p>도메인 모델 검증을 위해 <code>hibernate-validator</code> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.hibernate.validator:hibernate-validator:6.1.5.Final&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.hibernate.validator:hibernate-validator-annotation-processor:6.1.5.Final&#x27;</span></span><br></pre></td></tr></table></figure>

<p>기본적으로 클래스패스에 <code>Hibernate Validator</code>와 같은 Bean Validation 의존성이 포함되어있는 경우 전역 Validator로 <code>LocalValidatorFactoryBean</code>이 등록됩니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-13 10:46:54 [main] INFO  o.h.v.i.util.Version(21) - HV000001: Hibernate Validator 6.1.5.Final</span><br><span class="line">2020-09-13 10:46:54 [main] DEBUG o.h.v.i.e.AbstractConfigurationImpl(203) - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory</span><br><span class="line">2020-09-13 10:46:54 [main] DEBUG o.h.v.i.e.AbstractConfigurationImpl(217) - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1</span><br><span class="line">2020-09-13 10:46:54 [main] DEBUG o.h.v.i.x.c.ValidationXmlParser(120) - Trying to load META-INF&#x2F;validation.xml for XML based Validator configuration.</span><br><span class="line">2020-09-13 10:46:54 [main] DEBUG o.h.v.i.x.c.ResourceLoaderHelper(53) - Trying to load META-INF&#x2F;validation.xml via user class loader</span><br><span class="line">2020-09-13 10:46:54 [main] DEBUG o.h.v.i.x.c.ResourceLoaderHelper(60) - Trying to load META-INF&#x2F;validation.xml via TCCL</span><br><span class="line">2020-09-13 10:46:54 [main] DEBUG o.h.v.i.x.c.ResourceLoaderHelper(66) - Trying to load META-INF&#x2F;validation.xml via Hibernate Validator&#39;s class loader</span><br><span class="line">2020-09-13 10:46:54 [main] DEBUG o.h.v.i.x.c.ValidationXmlParser(127) - No META-INF&#x2F;validation.xml found. Using annotation based configuration only.</span><br></pre></td></tr></table></figure>

<p>만약, 전역 Validator를 변경하고 싶은 경우 다음과 같이 <code>getValidator()</code>함수를 오버라이딩할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LocalValidatorFactoryBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Interceptors"><a href="#Interceptors" class="headerlink" title="Interceptors"></a>Interceptors</h3><p>디스패처 서블릿에 의해 처리가 위임된 웹 요청을 컨트롤러가 담당하기 전에 수행할 작업을 처리하는 것은 인터셉터라는 컴포넌트가 담당합니다. 스프링 웹 MVC는 특정 패턴에 대한 웹 요청에 대해서 인터셉터를 등록할 수 있도록 지원합니다.</p>
<p>인터셉터 등록은 <code>InterceptorRegistry</code>를 통해 가능합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LocaleChangeInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>그리고 특정 경로에 대해서만 인터셉터를 적용할 수도 있습니다. 예를 들어, 애플리케이션에서 제공하는 API에 대한 인증을 위해 토큰을 발급하고 검증을 확인하는 작업을 수행할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addInterceptor(<span class="keyword">new</span> HandlerInterceptorAdapter() &#123;&#125;).addPathPatterns(<span class="string">&quot;/api/**&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>좀 더 응용하여 웹 요청에 대한 보안을 체크하는 로직이나 처리를 담당하는 컨트롤러의 핸들러 함수가 View를 응답하는 경우에 Model에 공통된 값을 주입하기 위한 작업을 수행할 수 있습니다.</p>
</blockquote>
<h3 id="MessageConverters"><a href="#MessageConverters" class="headerlink" title="MessageConverters"></a>MessageConverters</h3><p>스프링 프레임워크는 컨트롤러의 핸들러 함수에 <code>@ResponseBody</code>가 선언되어 있다면 반환되는 객체를 메시지로 변환하여 응답하기 위한 작업을 수행합니다. 예를 들어, <code>Map</code> 형식을 <code>JSON</code> 형식의 메시지로 변경하기 위해서 <code>ObjectMapper</code>를 사용하는 <code>MappingJackson2HttpMessageConverter</code>를 사용하도록 설정할 수 있습니다.  </p>
<p>우선 아무런 설정 없이 컨트롤러 핸들러 함수에 @ResponseBody를 선언하고 Map 객체를 반환하도록 해보겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/json&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">json</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; body = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    body.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>그러면 다음과 같이 기본적으로 Map 형식에 대한 메시지 컨버터가 없으므로 다음과 같은 오류가 발생합니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.http.converter.HttpMessageNotWritableException: No converter found for return value of type: class java.util.HashMap</span><br><span class="line">	org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:230)</span><br><span class="line">	org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)</span><br><span class="line">	org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)</span><br><span class="line">	org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)</span><br><span class="line">	org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)</span><br><span class="line">	org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)</span><br><span class="line">	org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)</span><br><span class="line">	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)</span><br><span class="line">	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)</span><br><span class="line">	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)</span><br><span class="line">	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)</span><br><span class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:645)</span><br><span class="line">	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)</span><br><span class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:750)</span><br></pre></td></tr></table></figure>

<p>그러면 Map으로 반환하는 것을 JSON 형식의 메시지로 변환하여 응답하도록 메시지 컨버터를 추가해보겠습니다.</p>
<p><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind/2.11.2"><code>jackson-databind</code></a> 의존성을 추가합니다. </p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.fasterxml.jackson.core:jackson-databind:2.11.2&#x27;</span></span><br></pre></td></tr></table></figure>

<p>클래스패스에 <code>jackson-databind</code> 의존성이 포함되면 자동으로 <code>MappingJackson2HttpMessageConverter</code>가 메시지 컨버터로 등록됩니다. 이제 MappingJackson2HttpMessageConverter에 의해 Map 형식이 JSON 형식의 문자열로 변환되어 응답됩니다.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>그리고 <code>configureMessageConverters()</code> 함수를 통해 메시지 컨버터를 등록할 수 있습니다. 예를 들어, MappingJackson2HttpMessageConverter에서 사용하는 <code>ObjectMapper</code>를 변경할 수 도 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        Jackson2ObjectMapperBuilder objectMapperBuilder = <span class="keyword">new</span> Jackson2ObjectMapperBuilder()</span><br><span class="line">                .indentOutput(<span class="keyword">true</span>);</span><br><span class="line">        converters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter(objectMapperBuilder.build()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 예제 코드에서 ObjectMapper의 <code>indentOutput</code> 속성을 활성화하였으므로 다음과 같이 응답 메시지가 출력됩니다.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;message&quot;</span> : <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="View-Resolvers"><a href="#View-Resolvers" class="headerlink" title="View Resolvers"></a>View Resolvers</h3><p>지난 글에서 프리마커 템플릿 엔진을 사용하여 HTML을 응답하기 위해 FreeMarkerViewResolver를 빈 클래스로 등록하였습니다. MVC Configuration에서 제공하는 <code>configureViewResolvers()</code>함수를 통해 좀더 쉽게 FreeMarkerViewResolver를 빈으로 등록할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.freeMarker()</span><br><span class="line">                .cache(<span class="keyword">false</span>)</span><br><span class="line">                .suffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>클래스패스에 <a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind/2.11.2"><code>jackson-databind</code></a>이 포함되면 <code>ContentNegotiatingViewResolver</code>가 JSON 형식의 메시지를 처리할 수 있도록 <code>MappingJackson2JsonView</code>를 등록합니다.</p>
<p>ContentNegotiatingViewResolver는 웹 요청 경로에 확장자가 표현되는 경우 해당 형식으로 응답할 수 있도록 지원합니다. 예를 들어, <code>.json</code>으로 끝나는 요청에 대하여 MappingJackson2JsonView으로 응답하는 것을 말합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.enableContentNegotiation(<span class="keyword">new</span> MappingJackson2JsonView());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Static-Resources"><a href="#Static-Resources" class="headerlink" title="Static Resources"></a>Static Resources</h3><p>때때로, 웹 애플리케이션에서는 자바스크립트, 스타일시트 또는 이미지 파일과 같은 <code>정적 리소스</code>를 제공해야할 수 있습니다. 그리고 이 정적 리소스는 사용자 또는 응답한 HTML에서 요구할 가능성이 있습니다.</p>
<p>스프링 MVC Configuration는 정적 리소스를 처리할 수 있도록 <code>Resource Handler</code>를 지원합니다.</p>
<p>리소스 핸들러 등록은 <code>addResourceHandlers()</code>함수에서 <code>ResourceHandlerRegistry</code>를 통해 가능합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/static/images/&quot;</span>, <span class="string">&quot;classpath:/static/css/&quot;</span>, <span class="string">&quot;classpath:/static/js/&quot;</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(Duration.ofDays(<span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위와 같이 설정된 경우 <code>/images</code>, <code>/css</code>, <code>/js</code>로 시작되는 요청은 리소스 핸들러가 담당하도록 처리되며 리소스 핸들러가 찾아야할 리소스의 위치는 클래스패스에 있는 <code>static</code> 폴더입니다.</p>
<p>다음과 같이 <a href="http://localhost:8080/images/snorlax.jpg">http://localhost:8080/images/snorlax.jpg</a> 요청에 대해 <code>static/images/snorlax.jpg</code> 경로의 파일을 찾아 응답하게 됩니다.</p>
<p><img data-src="/images/posts/spring5-002.PNG"></p>
<h2 id="Advanced-MVC-Configuration"><a href="#Advanced-MVC-Configuration" class="headerlink" title="Advanced MVC Configuration"></a>Advanced MVC Configuration</h2><p>스프링 프레임워크 기반의 웹 애플리케이션을 위해 도움이 되는 몇가지 설정에 대해 알아보겠습니다.</p>
<h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p><code>spring-web</code> 모듈은 웹 애플리케이션에서 활용할 수 있는 유용한 필터 클래스들을 제공합니다.</p>
<h4 id="FormContentFilter"><a href="#FormContentFilter" class="headerlink" title="FormContentFilter"></a>FormContentFilter</h4><p>브라우저는 기본적으로 HTTP.GET 또는 HTTP.POST을 통해 폼 데이터를 전송합니다. 브라우저가 아닌 클라이언트들은 PUT, PATCH, DELETE를 HTTP 메소드로도 사용할 수 있습니다. 그런데 Servlet API는 <code>ServletRequest.getParameter*()</code>가 HTTP POST에 대해서만 접근할 수 있도록 허용합니다.</p>
<p><code>spring-web</code> 모듈에서 제공하는 <code>FormContentFilter</code>는 <code>application/x-www-form-urlencoded</code>를 컨텐트 타입으로 요청하는 PUT, PATH, DELETE에 대해서 요청 바디를 폼 데이터로 읽을 수 있도록 <code>ServletRequest</code>에 대해 랩핑을 지원합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormContentFilter <span class="title">formContentFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FormContentFilter formContentFilter = <span class="keyword">new</span> FormContentFilter();</span><br><span class="line">    formContentFilter.setCharset(StandardCharsets.UTF_8);</span><br><span class="line">    formContentFilter.setFormConverter(<span class="keyword">new</span> FormHttpMessageConverter());</span><br><span class="line">    <span class="keyword">return</span> formContentFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ForwardedHeaderFilter"><a href="#ForwardedHeaderFilter" class="headerlink" title="ForwardedHeaderFilter"></a>ForwardedHeaderFilter</h4><p>로드 밸런서와 같이 프록시를 통해 들어오는 요청은 호스트, 포트 그리고 스키마가 변경될 가능성이 있습니다. 이에 스프링 웹 모듈에서 제공하는 <code>ForwardedHeaderFilter</code>는 RFC 7239로 정의된 <code>Forwared HTTP Header</code>에 대해서 본래의 요청 정보를 제공합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ForwardedHeaderFilter <span class="title">forwardedHeaderFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ForwardedHeaderFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>스프링 웹 MVC는 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/CORS"><code>CORS(Cross-Origin Resource Sharing)</code></a>를 처리할 수 있도록 지원합니다. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/api/**&quot;</span>)</span><br><span class="line">                .allowedMethods(HttpMethod.GET.name(), HttpMethod.POST.name(), HttpMethod.PUT.name(), HttpMethod.DELETE.name())</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                .maxAge(Duration.ofHours(<span class="number">1</span>).toSeconds());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HTTP-Caching"><a href="#HTTP-Caching" class="headerlink" title="HTTP Caching"></a>HTTP Caching</h3><p>HTTP 캐시는 웹 애플리케이션 성능을 향상시킬 수 있는 기능입니다. HTTP 캐시는 <code>Cache-Control</code> 응답 헤더와 함께 <code>Last-Modified</code>와 <code>ETag</code>와 같은 요청 헤더에 의해 이루어집니다. 스프링 프레임워크에서는 CacheControl를 통해 캐시 정책을 나타낼수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CacheControl cacheControl = CacheControl.maxAge(<span class="number">1</span>, TimeUnit.DAYS).noTransform().cachePublic();</span><br></pre></td></tr></table></figure>

<p>스프링 컨트롤러는 <code>ResponseEntity</code>를 통해 <code>CacheControl</code>을 적용할 수 있도록 지원합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/health&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .ok()</span><br><span class="line">                .cacheControl(CacheControl</span><br><span class="line">                                .maxAge(<span class="number">1</span>, TimeUnit.MINUTES)</span><br><span class="line">                                .cachePublic()</span><br><span class="line">                                .noTransform())</span><br><span class="line">                .body(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>눈치채지 못하셨을수도 있겠지만 <code>리소스 핸들러</code>를 등록할 때에도 캐시 정책을 지정하였습니다.</p>
</blockquote>
<h3 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h3><p>스프링 프레임워크는 보안 관련 기능을 <code>Spring Security</code> 프로젝트를 통해 제공합니다. 웹 보안과 관련된 부분은 스프링 시큐리티 모듈에 대한 글을 통해 알아보도록 합니다.</p>
<hr>
<p>스프링 프레임워크 기반의 웹 애플리케이션을 위한 기본적인 설정이나 기능에 대해서 추가해보았습니다. 앞으로는 웹 애플리케이션의 목표인 다음과 같은 것들을 적용하는 방법에 대해 다루도록 하겠습니다.</p>
<ul>
<li>스프링 테스트 모듈을 통한 애플리케이션 기능 테스트</li>
<li>웹 관련 기능 확장</li>
<li>구글 SMTP 서버를 활용한 이메일 발송</li>
<li>반복적인 작업을 수행하는 스케줄링 적용</li>
<li>스프링 JDBC를 활용한 데이터베이스 액세스</li>
<li>스프링 HTTP 요청 클라이언트 활용</li>
<li>스프링 세션을 활용한 사용자 세션 관리 적용</li>
<li>스프링 시큐리티를 활용한 웹 보안 적용</li>
</ul>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 프레임워크 시작하기</title>
    <url>/docs/getting-started-spring-framework/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<p>잠만보와 함께하는 스프링 프레임워크 기반의 웹 애플리케이션 개발 가이드는 스프링 프레임워크에 대하여 얕은 지식을 가지고 있는 잠만보가 스프링 프레임워크를 기반으로 웹 애플리케이션을 만들기 위한 공부 과정임을 알려드립니다.</p>
<p>이 가이드를 통해 만드는 웹 애플리케이션의 목표는 다음과 같습니다.</p>
<ul>
<li>애플리케이션 컨텍스트 개념 잡기</li>
<li>웹 애플리케이션 컨텍스트 구성</li>
<li>임베디드 톰캣으로 웹 애플리케이션 실행</li>
<li>스프링 테스트 모듈을 통한 애플리케이션 기능 테스트</li>
<li>웹 관련 기능 확장</li>
<li>구글 SMTP 서버를 활용한 이메일 발송</li>
<li>반복적인 작업을 수행하는 스케줄링 적용</li>
<li>스프링 JDBC를 활용한 데이터베이스 액세스</li>
<li>스프링 HTTP 요청 클라이언트 활용</li>
<li>스프링 세션을 활용한 사용자 세션 관리 적용</li>
<li>스프링 시큐리티를 활용한 웹 보안 적용</li>
</ul>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p><code>스프링 프레임워크</code> 기반의 웹 애플리케이션은 <a href="https://start.spring.io/"><code>start.spring.io</code></a>를 통해 스프링 부트 프로젝트를 통해 쉽게 만들어볼 수 있습니다. <code>스프링 부트 프로젝트</code>는 스프링 프레임워크 기반의 애플리케이션을 좀 더 쉽게 만들기 위한 하나의 프로젝트로써 기존의 스프링 프레임워크 코어 모듈을 사용하는 <code>스프링 애플리케이션</code>입니다.</p>
<p>스프링 부트 프로젝트로 쉽게 시작할 수는 있지만 우리의 목표는 스프링 프레임워크에서 사용하는 개념에 대하여 알아가면서 스프링 프레임워크 기반의 웹 애플리케이션을 만들어보는 것 입니다. 스프링 프레임워크에 대해서 알아야만 여러분들이 애플리케이션 개발하는데 어려움을 느끼는 부분을 그나마 쉽게 해결할 수 있습니다. </p>
<p>사실 상 스프링 프레임워크를 기반으로 웹 애플리케이션을 개발할 때 설정해야하는 부분이 생각보다 많습니다. 이 부분은 대부분의 스프링 애플리케이션 개발자들이 느끼는 바이며 이로 인해 스프링 부트 프로젝트가 진행되었다고 볼 수 있습니다. 따라서, 여러분들은 스프링 프레임워크를 어느 정도 알게되면 스프링 부트 프로젝트를 기반으로 웹 애플리케이션을 개발하시기를 추천합니다.</p>
<p>이제 우리는 스프링 프레임워크 기반의 애플리케이션에 대한 설정을 진행하기 위해 스프링 프레임워크에서 사용되는 개념에 대해 알아봅니다. 이 가이드를 통해 스프링 프레임워크에서 사용되는 전체적인 개념을 알아볼 순 없지만 스프링 프레임워크 기반의 웹 애플리케이션을 개발하는데 어려움이 없을 정도로만 개념을 잡으려고 합니다.</p>
<blockquote>
<p>스프링 프레임워크에 대한 전체적인 부분은 공식 레퍼런스 또는 잘 정리된 스프링 서적을 참고하시기 바랍니다.<br><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/">https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/</a></p>
</blockquote>
<h2 id="IoC-Container"><a href="#IoC-Container" class="headerlink" title="IoC Container"></a>IoC Container</h2><p>스프링 프레임워크 기반의 애플리케이션은 <code>제어 역전(Inversion of Control)</code>이라는 개념을 통해 애플리케이션이 동작합니다. 스프링 프레임워크는 <code>IoC 컨테이너</code>라는 특수한 컨테이너에 애플리케이션에서 사용되는 클래스를 담아두고 애플리케이션 개발자가 필요할 때 IoC 컨테이너에서 가져와서 사용할 수 있도록 제공합니다.</p>
<p>결국 스프링 프레임워크에서 사용하는 제어 역전이라는 개념은 애플리케이션에서 사용되는 클래스들에 대한 <code>생애 주기</code> 제어를 애플리케이션 개발자가 아닌 IoC 컨테이너가 담당하도록 하는 것이라고 이해할 수 있습니다. 이 특수한 컨테이너에서 관리되는 클래스들을 <code>빈(Bean)</code>, 그리고 이 빈 클래스들을 관리하고 제어를 담당하는 컨테이너를 IoC 컨테이너 또는 <code>빈 팩토리(Bean Factory)</code>라고 말합니다.</p>
<blockquote>
<p><code>org.springframework.beans</code>와 <code>org.springframework.context</code> 패키지에는 스프링 프레임워크 IoC 컨테이너의 기초가 되는 <code>BeanFactory</code>라는 인터페이스를 제공합니다.</p>
</blockquote>
<p>빈 팩토리는 애플리케이션 개발자가 사용하고자 하는 클래스들의 생애 주기를 담당하며 서로 다른 빈 클래스들이 연결하고 있는 의존성을 확인하고 이 의존성을 주입하는 것도 담당합니다. </p>
<blockquote>
<p><code>의존성 주입(Dependency Injection)</code>이라함은 빈 팩토리가 관리하는 <code>빈 클래스의 생성자</code> 또는 <code>팩토리 메소드의 매개변수</code> 그리고 인스턴스가 생성된 이후에 <code>프로퍼티</code>로써 설정되는 것을 말합니다.</p>
</blockquote>
<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>스프링 프레임워크는 <code>BeanFactory</code> 인터페이스를 확장하여 다양한 기능을 추가적으로 지원하는 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html"><code>ApplicationContext</code></a> 인터페이스를 제공합니다. 따라서, 스프링 프레임워크 기반의 애플리케이션을 개발할 때는 애플리케이션 컨텍스트를 주로 사용하게 됩니다. 또한, 웹 애플리케이션과 같은 특정 애플리케이션 레이어에서 사용할 수 있도록 애플리케이션 컨텍스트의 서브 인터페이스도 제공합니다. 예를 들어, <code>WebApplicationContext</code> 인터페이스는 <code>getServletContext()</code>함수를 제공하여 웹 애플리케이션에서 사용하는 <code>ServletContext</code>를 가져올 수 있도록 지원합니다.</p>
<p>스프링 프레임워크에서 제공하는 애플리케이션 컨텍스트는 다음과 같이 동작하게 됩니다.<br><img data-src="https://docs.spring.io/spring/docs/current/spring-framework-reference/images/container-magic.png"></p>
<p>애플리케이션에서 요구하는 <code>구성 메타정보</code>와 함께 애플리케이션 컨텍스트가 관리해야하는 빈 클래스들을 제공하면 애플리케이션 컨텍스트와 함께 완전히 구성된 애플리케이션이 준비됩니다. 이때, 애플리케이션 컨텍스트가 참조하는 구성 메타정보는 전통적으로 간단하고 직관적인 XML 형식을 사용하여 기술하였습니다. 그러나 스프링 3.0부터는 자바 코드를 기반으로 구성 메타정보를 기술할 수 있도록 제공하였습니다.</p>
<blockquote>
<p>저는 XML 보다는 자바 코드 기반으로 구성 메타정보를 기술하는 것을 선호하는 편입니다. 자바 코드를 기반으로 작성할 경우 컴파일 단계에서부터 오류를 파악할 수 있다는 장점이 있습니다.</p>
</blockquote>
<h3 id="Java-based-Container-Configuration"><a href="#Java-based-Container-Configuration" class="headerlink" title="Java-based Container Configuration"></a>Java-based Container Configuration</h3><p>애플리케이션에서 사용하는 라이브러리들을 관리하기 위한 의존성 관리도구로 <code>Gradle</code>을 사용하기 위하여 그레이들 프로젝트로 시작합니다. 인텔리제이와 <a href="https://spring.io/tools">STS</a> 같은 IDE로 쉽게 그레이들 프로젝트를 만들 수 있습니다.</p>
<p>먼저, 스프링 프레임워크의 애플리케이션 컨텍스트를 구성하기 위하여 build.gradle에 <a href="https://mvnrepository.com/artifact/org.springframework/spring-context/5.2.8.RELEASE"><code>spring-context</code></a> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;org.example&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework:spring-context:5.2.8.RELEASE&#x27;</span></span><br><span class="line">    testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>스프링 <code>spring-context</code> 모듈에는 ApplicationContext 인터페이스와 함께 <code>AnnotationConfigApplicationContext</code>라는 구현체를 함께 제공합니다. 이 구현체는 자바 어노테이션 기반으로 구성 메타정보를 작성할 수 있도록 지원하는 애플리케이션 컨텍스트입니다. </p>
<p>AnnotationConfigApplicationContext는 <code>@Configuration</code>과 <code>@Component</code> 그리고 <code>@Bean</code> 어노테이션을 사용하여 애플리케이션 컨텍스트를 구성합니다.</p>
<p>자바 기반의 구성 메타정보는 <code>@Configuration</code>을 선언하여 구성 메타정보 클래스로 기술합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>그리고 다음과 같이 BasicService, SpringApplication을 생성합니다. 그리고 앞서 만들었던 AppConfig 구성 메타정보 클래스를 애플리케이션 컨텍스트를 생성하면서 구성 메타정보로 활용하도록 제공합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicService</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        BasicService basicService = applicationContext.getBean(BasicService.class);</span><br><span class="line">        System.out.println(basicService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringApplication을 실행해보면 애플리케이션 컨텍스트의 구성 메타정보 클래스에는 어떠한 빈 클래스도 등록하지 않았으므로 다음과 같이 오류가 발생할 것입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: <span class="string">&#x27;127.0.0.1:14173&#x27;</span>, transport: <span class="string">&#x27;socket&#x27;</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type <span class="string">&#x27;service.BasicService&#x27;</span> available</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:<span class="number">352</span>)</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:<span class="number">343</span>)</span><br><span class="line">    at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:<span class="number">1127</span>)</span><br><span class="line">    at SpringApplication.main(SpringApplication.java:<span class="number">8</span>)</span><br><span class="line">Disconnected from the target VM, address: <span class="string">&#x27;127.0.0.1:14173&#x27;</span>, transport: <span class="string">&#x27;socket&#x27;</span></span><br></pre></td></tr></table></figure>

<p>이제 구성 메타정보 클래스에 빈을 등록해보도록 하겠습니다. @Configuration가 선언된 구성 메타정보 클래스에 빈 클래스를 등록할 때에는 <code>@Bean</code>을 빈 클래스를 반환하는 함수에 선언합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicService <span class="title">basicService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다시 SpringApplication을 실행하면 다음과 같이 애플리케이션 컨텍스트로부터 BasicService 유형의 빈 클래스를 가져올 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service.BasicService@<span class="number">23</span>c30a20</span><br></pre></td></tr></table></figure>

<p>여기서 구성 메타정보 클래스에 빈 클래스를 등록하는 또 다른 방법을 소개하겠습니다. 바로 <code>@ComponentScan</code>과 <code>@Component</code> 어노테이션을 활용하는 것입니다.</p>
<h3 id="CompnentScan"><a href="#CompnentScan" class="headerlink" title="@CompnentScan"></a>@CompnentScan</h3><p>@Configuration를 선언한 클래스에 <code>@CompnentScan</code>을 선언하여 특정 <code>패키지 단위</code>로 빈을 등록할 수 있습니다. @CompnentScan는 지정된 패키지에 속한 클래스에 <code>@Component</code>가 선언되는 경우 현재 구성 메타정보 클래스에 빈으로 포함시키는 특별한 일을 수행합니다.</p>
<p>만약, @Component가 선언된 클래스가 특정 패키지에 있다면 다음과 같이 구성 메타정보 클래스에 직접 빈을 등록하지 않아도 포함됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>그리고 service 패키지에 <code>ConversionService</code>라는 클래스를 만들고 @Component를 선언합니다. 그리고 애플리케이션 컨텍스트로부터 ConversionService 유형의 빈 클래스를 가져옵니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConversionService</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        ConversionService conversionService = applicationContext.getBean(ConversionService.class);</span><br><span class="line">        System.out.println(conversionService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다음과 같이 정상적으로 ConversionService 유형의 빈 클래스를 가져왔음을 확인합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service.ConversionService@<span class="number">1</span>c5920df</span><br></pre></td></tr></table></figure>

<p>그레이들을 통해 스프링 의존성을 추가하고 자바 기반의 컨테이너를 구성해보았습니다. 여기까지 내용을 정리해보면 다음과 같습니다.</p>
<ul>
<li>애플리케이션 컨텍스트에서 활용하는 구성 메타정보는 <code>@Configuration</code>을 선언하여 만든다.</li>
<li>@Configuration을 선언한 구성 메타정보 클래스에서 <code>@Bean</code>을 선언하여 빈을 등록할 수 있다.</li>
<li><code>@CompnentScan</code>을 선언하여<code> @Component</code>가 선언된 클래스를 패키지 단위로 빈으로 등록할 수도 있다.</li>
</ul>
<p>이제 우리는 애플리케이션 컨텍스트를 구성하는 것, 구성 메타정보 클래스를 기술하는 것, 빈 클래스를 등록하는 법에 대하여 알게되었습니다. </p>
<h2 id="Additional-Capabilities"><a href="#Additional-Capabilities" class="headerlink" title="Additional Capabilities"></a>Additional Capabilities</h2><p>애플리케이션 컨텍스트는 빈 클래스들을 관리할 뿐만 아니라 추가적인 기능을 제공합니다. 애플리케이션 컨텍스트가 제공하는 추가 기능을 하나씩 다뤄보도록 하겠습니다.</p>
<h3 id="Environment-Abstraction"><a href="#Environment-Abstraction" class="headerlink" title="Environment Abstraction"></a>Environment Abstraction</h3><p>애플리케이션 컨텍스트가 제공하는 첫번째 기능은 환경변수와 같은 프로퍼티를 관리하거나 환경을 구분할 수 있는 프로파일을 지정하는 것입니다. </p>
<h4 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h4><p>@Configuration을 선언한 구성 메타정보 클래스에 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-definition-profiles-java"><code>@Profile</code></a>을 선언하여 애플리케이션 환경을 구분할 수 있습니다. @Profile이 선언된 구성 메타정보에 기술된 빈은 해당 프로파일이 활성화 되어있을 경우 등록됩니다.</p>
<p>앞서 만들었던 AppConfig 클래스에 @Profile을 선언하고 실행합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Profile(&#123;&quot;mambo&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>프로파일을 지정하면 다음과 같이 애플리케이션 컨텍스트로부터 EventService 빈을 가져올 수 없습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type <span class="string">&#x27;service.EventService&#x27;</span> available</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:<span class="number">352</span>)</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:<span class="number">343</span>)</span><br><span class="line">    at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:<span class="number">1127</span>)</span><br><span class="line">    at SpringApplication.main(SpringApplication.java:<span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<p>애플리케이션 컨텍스트가 참조하는 Environment에 프로파일을 지정할 수 있도록 약간 수정합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="line">        environment.setActiveProfiles(<span class="string">&quot;mambo&quot;</span>);</span><br><span class="line">        applicationContext.register(AppConfig.class);</span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">        EventService eventService = applicationContext.getBean(EventService.class);</span><br><span class="line">        System.out.println(eventService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mambo라는 프로파일을 지정하였기에 다음과 같이 EventService 빈을 가져올 수 있게 됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service.EventService@<span class="number">4</span>ef74c3</span><br></pre></td></tr></table></figure>

<h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><p>Environment 인터페이스를 통해 애플리케이션에서 사용하는 환경변수인 프로퍼티를 관리할 수 있습니다. <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-using-propertysource"><code>@PropertySource</code></a>는 구성 메타정보 클래스에 선언되어 <code>.properties</code> 파일에 기술된 프로퍼티 정보를 Environment에 주입할 수 있도록 지원합니다.</p>
<p>다음과 같이 클래스패스에 application.properties 파일을 생성하여 프로퍼티를 기술합니다.</p>
<figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">SpringApplication</span></span><br></pre></td></tr></table></figure>

<p>그리고 @PropertySource를 선언하여 application.properties 파일을 지정하고 Environment를 통해 프로퍼티를 가져와봅니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:application.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;mambo&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="line">        environment.setActiveProfiles(<span class="string">&quot;mambo&quot;</span>);</span><br><span class="line">        applicationContext.register(AppConfig.class);</span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">        String property = environment.getProperty(<span class="string">&quot;spring.application.name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;property: &quot;</span>+ property);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다음과 같이 프로퍼티 파일에 기술한 프로퍼티를 가져올 수 있게 되었습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">property: SpringApplication</span><br></pre></td></tr></table></figure>

<h3 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h3><p>애플리케이션 컨텍스트가 제공하는 또 다른 기능은 메시지 소스를 관리하는 것입니다. <code>MessageSource</code> 인터페이스는 <code>i8n</code>이라고 하는 국제화 기능을 지원합니다. 애플리케이션 컨텍스트가 실행될 때 구성 메타정보에 선언된 <code>MessageSource</code> 유형의 빈을 자동으로 찾아 메시지 소스로 등록하게 되어있습니다.</p>
<p>스프링 프레임워크는 <code>ResourceBundleMessageSource</code>와 같은 MessageSource 구현체를 제공합니다. 대부분의 스프링 프레임워크 기반의 애플리케이션은 ResourceBundleMessageSource를 메시지 소스로 등록하여 사용하며 이 구현체에 대한 대안으로 <code>핫 리로드</code>를 지원하는 <code>ReloadableResourceBundleMessageSource</code>도 있습니다.</p>
<p>메시지 소스로 관리할 메시지가 포함되어있는 messages.properties 파일을 클래스패스에 추가합니다.</p>
<figure class="highlight properties"><figcaption><span>messages.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">argument.required</span>=<span class="string">The &#123;0&#125; argument is required.</span></span><br></pre></td></tr></table></figure>

<p>구성 메타정보 클래스에 ResourceBundleMessageSource를 빈으로 등록합니다. 이때, <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/support/AbstractResourceBasedMessageSource.html#setBasenames-java.lang.String...-">setBasenames</a> 함수를 사용하여 클래스패스에 있는 messages*.properties를 찾아 메시지 소스로 등록하도록 합니다. </p>
<p>ResourceBundleMessageSource는 setBasenames에 지정된 이름으로 시작하는 리소스들을 불러와서 메시지로 저장합니다. 예를 들어, <code>messages.properties</code>, <code>messages_ko.properties</code>, <code>messages_en.properties</code>와 같이 언어별로 메시지를 구분할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:application.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;mambo&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        messageSource.setBasenames(<span class="string">&quot;messages&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>그리고 애플리케이션 컨텍스트에서 메시지 소스에 등록된 메시지를 가져올 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="line">        environment.setActiveProfiles(<span class="string">&quot;mambo&quot;</span>);</span><br><span class="line">        applicationContext.register(AppConfig.class);</span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">        String message = applicationContext.getMessage(<span class="string">&quot;argument.required&quot;</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;username&quot;</span>&#125;, Locale.getDefault());</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다음과 같이 메시지의 {0}부분이 매개변수 “username”로 치환하여 제공하였습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">The username argument is required.</span><br></pre></td></tr></table></figure>

<h3 id="Access-Resources"><a href="#Access-Resources" class="headerlink" title="Access Resources"></a>Access Resources</h3><p>애플리케이션 컨텍스트는 <code>ResourceLoader</code> 인터페이스를 통하여 <code>Resource</code> 오브젝트를 불러올 수도 있습니다. Resource는 클래스패스, 파일 시스템, 표준 URL등 다양한 방식으로 로우-레벨의 리소스를 가져올 수 있습니다.</p>
<p>클래스패스에 README.md 파일을 만들고 애플리케이션 컨텍스트로부터 파일을 가져와보겠습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="line">        environment.setActiveProfiles(<span class="string">&quot;mambo&quot;</span>);</span><br><span class="line">        applicationContext.register(AppConfig.class);</span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Resource resource = applicationContext.getResource(<span class="string">&quot;classpath:README.md&quot;</span>);</span><br><span class="line">            String readme = StreamUtils.copyToString(resource.getInputStream(), StandardCharsets.UTF_8);</span><br><span class="line">            System.out.println(readme);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다음과 같이 <code>README.md</code> 파일 내용이 출력되었습니다. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">An application context is a ResourceLoader, which can be used to load Resource objects.</span><br></pre></td></tr></table></figure>

<h3 id="Event-Publication"><a href="#Event-Publication" class="headerlink" title="Event Publication"></a>Event Publication</h3><p>애플리케이션 컨텍스트는 <code>ApplicationEventPublisher</code> 인터페이스를 통하여 컨테이너에 존재하는 빈들에게 이벤트를 발행할 수 있습니다. 그리고 빈 클래스에서 <code>@EventListener</code>를 선언한 메소드에서 애플리케이션 컨텍스트가 발행한 이벤트를 수신하여 처리할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="line">        environment.setActiveProfiles(<span class="string">&quot;mambo&quot;</span>);</span><br><span class="line">        applicationContext.register(AppConfig.class);</span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">        applicationContext.publishEvent(<span class="string">&quot;Published!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>애플리케이션 컨텍스트를 통해 이벤트를 발행하였습니다. 이제 해당 이벤트를 수신하기 위하여 @EventListener를 선언한 메소드를 만듭니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        <span class="comment">// Published!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>앞선 예제 코드에서는 String 유형의 메시지를 발행하였으나 특정 빈 클래스들이 이벤트를 수신하여 처리할 수 있도록 이벤트 오브젝트를 만들어 발행할 수 있습니다. 예를 들어, 애플리케이션 컨텍스트의 <code>start()</code> 함수를 호출하면 <code>ContextStartedEvent</code> 이벤트가 발행됩니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">applicationContext.start();</span><br><span class="line"></span><br><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startUp</span><span class="params">(ContextStartedEvent startedEvent)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Context started : &quot;</span> + startedEvent.getSource());</span><br><span class="line">    <span class="comment">// Context started : org.springframework.context.annotation.AnnotationConfigApplicationContext@51cdd8a, started on Thu Sep 10 23:48:00 KST 2020</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Aware"><a href="#Aware" class="headerlink" title="Aware"></a>Aware</h2><p>Aware 인터페이스는 빈 클래스가 사용되는 시점에 Setter 기반의 의존성을 주입할 수 있도록 제공합니다. 스프링 프레임워크는 기본적으로 제공하는 *Aware 인터페이스가 있습니다. 스프링 프레임워크에 포함된 대부분의 클래스들도 이 Aware 인터페이스를 포함하고있습니다.</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContextAware.html"><code>ApplicationContextAware</code></a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/EnvironmentAware.html"><code>EnvironmentAware</code></a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ResourceLoaderAware.html"><code>ResourceLoaderAware</code></a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/MessageSourceAware.html"><code>MessageSourceAware</code></a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/ServletContextAware.html"><code>ServletContextAware</code></a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/quartz/SchedulerContextAware.html"><code>SchedulerContextAware</code></a></li>
</ul>
<p>ServletContextAware와 SchedulerContextAware와 같은 인터페이스는 특정한 애플리케이션 컨텍스트 또는 특정 인터페이스 구현체에서만 의존성을 주입할 수 있습니다.</p>
<hr>
<p>스프링 프레임워크 기반의 애플리케이션을 만들기 위해서 IoC 컨테이너인 애플리케이션 컨텍스트를 구성하고 애플리케이션 컨텍스트가 제공하는 여러가지 기능에 대하여 알아보았습니다. 스프링 프레임워크는 웹 애플리케이션을 개발할 수 있도록 <code>WebApplicationContext</code>라는 확장된 애플리케이션 컨텍스트를 제공합니다. </p>
<p>다음 글에서는 웹 애플리케이션 컨텍스트를 활용하여 <a href="../building-web-application-with-spring-framework">스프링 프레임워크 기반의 웹 애플리케이션</a>을 만들어보는 시간을 가지겠습니다. </p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>스프링 웹 애플리케이션 - 태스크 수행 및 스케줄링</title>
    <url>/docs/spring-web-application-task-execution-and-scheduling/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>본 글은 스프링 프레임워크 Version <code>5.2.8.RELEASE</code> 문서를 기반으로 작성하였습니다.</p>
<h2 id="Task-Execution-and-Scheduling"><a href="#Task-Execution-and-Scheduling" class="headerlink" title="Task Execution and Scheduling"></a>Task Execution and Scheduling</h2><p>스프링 프레임워크는 비동기적으로 어떠한 작업을 수행하거나 반복적으로 수행해야하는 스케줄링 기능을 지원하기 위하여 <code>TaskExecutor</code>와 <code>TaskScheduler</code> 인터페이스를 제공합니다. </p>
<h3 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h3><p>스프링 프레임워크에서 반복적으로 수행하는 스케줄링은 <code>TaskScheduler</code> 인터페이스에 의해 동작합니다. 그리고 스케줄링 기능을 활성화하기 위한 <code>@EnableScheduling</code> 어노테이션을 제공합니다.</p>
<p>구성 메타정보 클래스에 @EnableScheduling을 선언하면 <code>@Scheduled</code>에 의한 스케줄링을 활성화 할 수 있습니다. @Scheduled가 선언된 스케줄링 핸들러 함수를 수행하는 주체는 <code>TaskExecutor</code>가 담당합니다.</p>
<p>일반적으로 사용되는 TaskScheduler는 <code>ThreadPoolTaskScheduler</code>입니다.</p>
<figure class="highlight java"><figcaption><span>ScheduleConfig.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.example.demo.schedule&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">threadPoolTaskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskScheduler taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>예를 들어, 다음과 같이 크론 표현식을 사용하여 <code>1분 마다</code> 동작하는 스케줄링을 추가할 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleScheduler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ExampleScheduler.class);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleScheduler</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * *&quot;, zone = &quot;Asia/Seoul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       LOG.info(<span class="string">&quot;run, &#123;&#125;&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Asynchronous-Execution"><a href="#Asynchronous-Execution" class="headerlink" title="Asynchronous Execution"></a>Asynchronous Execution</h3><p>스프링 프레임워크는 태스크에 대한 수행을 <code>TaskExecutor</code> 인터페이스가 담당합니다. 그리고 비동기로 수행하는 것을 지원하기 위하여 <code>@EnableAsync</code>와 <code>@Async</code> 어노테이션을 제공합니다.</p>
<p>구성 메타정보 클래스에 <code>@EnableAsync</code>를 선언하면 <code>@Async</code>가 선언된 함수는 비동기로 수행되며 수행을 담당하는 주체는 <code>TaskExecutor</code>가 됩니다.</p>
<p>일반적으로 많이 사용되는 TaskExecutor 구현체는 <code>ThreadPoolTaskExecutor</code>입니다. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.example.demo.handler&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskExecutor <span class="title">asyncThreadPoolTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> asyncThreadPoolTaskExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위와 같이 <code>AsyncConfigurer</code> 인터페이스를 통해 비동기로 수행되는 <code>TaskExecutor</code>를 변경할 수 있게 되어 asyncThreadPoolTaskExecutor에 의해 스레드 풀에서 반환된 TaskExecutor가 비동기로 수행합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ExampleService.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleService</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOG.debug(<span class="string">&quot;executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Quartz-Scheduler"><a href="#Quartz-Scheduler" class="headerlink" title="Quartz Scheduler"></a>Quartz Scheduler</h2><p><a href="http://www.quartz-scheduler.org/"><code>Quartz</code></a>는 자바 애플리케이션을 위한 스케줄러 라이브러리입니다. 스프링의 태스크 스케줄러는 단일 애플리케이션에는 문제없이 사용할 수 있지만 분산 환경에서 동작해야하는 웹 애플리케이션에서는 사용할 수 없습니다. 이와 비교하여 쿼츠 스케줄러는 메모리 기반의 스케줄링 뿐만 아니라 JTA 트랜잭션과 클러스터링을 지원합니다.</p>
<p><code>quartz</code>와 <code>spring-tx</code> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.quartz-scheduler:quartz:2.3.2&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.quartz-scheduler:quartz-jobs:2.3.2&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.springframework:spring-tx:5.2.8.RELEASE&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.springframework:spring-context-support:5.2.8.RELEASE&#x27;</span></span><br></pre></td></tr></table></figure>

<p>클래스패스에 <code>quartz.properties</code>를 생성하여 쿼츠 스케줄러에서 사용되는 프로퍼티를 기술합니다.</p>
<figure class="highlight properties"><figcaption><span>quartz.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"><span class="comment"># Configure Main Scheduler Properties</span></span><br><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceName</span> = <span class="string">MyClusteredScheduler</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceId</span> = <span class="string">AUTO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"><span class="comment"># Configure ThreadPool</span></span><br><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.quartz.threadPool.class</span> = <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadCount</span> = <span class="string">25</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadPriority</span> = <span class="string">5</span></span><br></pre></td></tr></table></figure>

<p>application.properties에 쿼츠 스케줄러 설정을 위한 프로퍼티를 기술합니다.</p>
<figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.quartz.job-store-type</span>=<span class="string">MEMORY</span></span><br><span class="line"><span class="meta">spring.quartz.scheduler-name</span>=<span class="string">quartz-scheduler</span></span><br><span class="line"><span class="meta">spring.quartz.start-up-delay</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.quartz.auto-startup</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.quartz.overwrite-existing-jobs</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.quartz.wait-for-jobs-to-complete-on-shutdown</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h3 id="SpringBeanJobFactory"><a href="#SpringBeanJobFactory" class="headerlink" title="SpringBeanJobFactory"></a>SpringBeanJobFactory</h3><p><code>spring-context-support</code> 모듈에는 스케줄을 수행하는 <code>QuartzJobBean</code>을 동적으로 생성시킬 수 있도록 지원하는 <code>SpringBeanJobFactory</code> 클래스를 제공합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.example.demo.schedule&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobFactory <span class="title">quartzJobFactory</span><span class="params">(AutowireCapableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringBeanJobFactory()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">createJobInstance</span><span class="params">(TriggerFiredBundle bundle)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Object job = <span class="keyword">super</span>.createJobInstance(bundle);</span><br><span class="line">                beanFactory.autowireBean(job);</span><br><span class="line">                <span class="keyword">return</span> job;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SchedulerFactoryBean"><a href="#SchedulerFactoryBean" class="headerlink" title="SchedulerFactoryBean"></a>SchedulerFactoryBean</h3><p><code>spring-context-support</code> 모듈에는 쿼츠 스케줄러에 대한 라이프사이클을 관리할 수 있도록 <code>SchedulerFactoryBean</code> 클래스를 제공합니다. </p>
<p>다음과 같이 SchedulerFactoryBean를 빈으로 등록합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.example.demo.schedule&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleConfig</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobFactory <span class="title">quartzJobFactory</span><span class="params">(AutowireCapableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringBeanJobFactory()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">createJobInstance</span><span class="params">(TriggerFiredBundle bundle)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Object job = <span class="keyword">super</span>.createJobInstance(bundle);</span><br><span class="line">                beanFactory.autowireBean(job);</span><br><span class="line">                <span class="keyword">return</span> job;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskExecutor <span class="title">quartzThreadPoolTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        taskExecutor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        taskExecutor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        <span class="keyword">return</span> taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">(JobFactory jobFactory, List&lt;Trigger&gt; triggers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SchedulerFactoryBean schedulerFactoryBean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        schedulerFactoryBean.setApplicationContext(applicationContext);</span><br><span class="line">        schedulerFactoryBean.setTaskExecutor(quartzThreadPoolTaskExecutor());</span><br><span class="line">        schedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class="line">        schedulerFactoryBean.setTriggers(triggers.toArray(<span class="keyword">new</span> Trigger[triggers.size()]));</span><br><span class="line"></span><br><span class="line">        Environment environment = applicationContext.getEnvironment();</span><br><span class="line">        QuartzProperties quartzProperties = <span class="keyword">new</span> QuartzProperties(environment);</span><br><span class="line">        schedulerFactoryBean.setSchedulerName(quartzProperties.getSchedulerName());</span><br><span class="line">        schedulerFactoryBean.setStartupDelay(quartzProperties.getStartUpDelay());</span><br><span class="line">        schedulerFactoryBean.setAutoStartup(quartzProperties.isAutoStartup());</span><br><span class="line">        schedulerFactoryBean.setOverwriteExistingJobs(quartzProperties.isOverwriteExistingJobs());</span><br><span class="line">        schedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(quartzProperties.isWaitForJobsToCompleteOnShutdown());</span><br><span class="line">        schedulerFactoryBean.setQuartzProperties(quartzProperties.getProperties());</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>위 예제 코드에서 QuartzProperties는 다음과 같이 구성하였습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> JobStoreType &#123;</span><br><span class="line">    MEMORY, JDBC</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JobStoreType jobStoreType;</span><br><span class="line">    <span class="keyword">private</span> String schedulerName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startUpDelay;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> autoStartup;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> overwriteExistingJobs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> waitForJobsToCompleteOnShutdown;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuartzProperties</span><span class="params">(Environment environment)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobStoreType = environment.getProperty(<span class="string">&quot;spring.quartz.job-store-type&quot;</span>, JobStoreType.class, JobStoreType.MEMORY);</span><br><span class="line">        <span class="keyword">this</span>.schedulerName = environment.getProperty(<span class="string">&quot;spring.quartz.scheduler-name&quot;</span>, String.class, &quot;quartz-scheduler&quot;);</span><br><span class="line">        <span class="keyword">this</span>.startUpDelay = environment.getProperty(<span class="string">&quot;spring.quartz.start-up-delay&quot;</span>, Integer.class, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.autoStartup = environment.getProperty(<span class="string">&quot;spring.quartz.auto-startup&quot;</span>, Boolean.class, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.overwriteExistingJobs = environment.getProperty(<span class="string">&quot;spring.quartz.overwrite-existing-jobs&quot;</span>, Boolean.class, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.waitForJobsToCompleteOnShutdown = environment.getProperty(<span class="string">&quot;spring.quartz.wait-for-jobs-to-complete-on-shutdown&quot;</span>, Boolean.class, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        PropertiesFactoryBean propertiesFactoryBean = <span class="keyword">new</span> PropertiesFactoryBean();</span><br><span class="line">        propertiesFactoryBean.setLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;quartz.properties&quot;</span>));</span><br><span class="line">        propertiesFactoryBean.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">this</span>.properties = propertiesFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="QuartzJobBean"><a href="#QuartzJobBean" class="headerlink" title="QuartzJobBean"></a>QuartzJobBean</h3><p><code>spring-context-support</code>에는 쿼츠 스케줄러가 스케줄을 수행하는 Job 구현체를 제공합니다. 애플리케이션 개발자는 QuartzJobBean를 빈으로 등록함으로써 쿼츠 스케줄러 잡을 등록할 수 있습니다.</p>
<p>다음은 QuartzJobBean을 확장한 잡을 구성하는 예제입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzSampleJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(QuartzSampleJob.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IDENTITY = <span class="string">&quot;QuartzSampleJob&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">&quot;Execute using quartz scheduler!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;QuartzSampleJob&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">jobDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob().ofType(<span class="keyword">this</span>.getClass())</span><br><span class="line">                .withIdentity(IDENTITY)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;QuartzSampleJobTrigger&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CronTriggerFactoryBean <span class="title">jobTrigger</span><span class="params">(<span class="meta">@Qualifier(&quot;QuartzSampleJob&quot;)</span> JobDetail jobDetail)</span> </span>&#123;</span><br><span class="line">        CronTriggerFactoryBean factoryBean = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">        factoryBean.setJobDetail(jobDetail);</span><br><span class="line">        factoryBean.setCronExpression(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>쿼츠 스케줄러는 <code>JobDetail</code>을 통해 Job의 수행 방식과 실행에 필요한 정보를 참조합니다. 또한, Trigger에는 JobDetail을 어떻게 실행되어야하는지를 결정합니다. 위 예제에서는 CronTrigger를 사용하여 크론 표현식을 통해 반복적으로 수행하도록 하였습니다.</p>
<p>따라서, 쿼츠 스케줄러는 JobDetail과 Trigger에 의해 스케줄링 기능을 수행하며 애플리케이션 개발자인 우리는 QuartzJobBean에 대한 JobDetail과 Trigger를 빈으로 등록하는 과정을 수행하면 됩니다.</p>
<p>이제 애플리케이션을 수행하면 다음과 같이 쿼츠 스케줄러에 대한 로그와 함께 스케줄링이 수행되는 로그가 출력됩니다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-18 15:54:40 [main] INFO  o.s.s.c.ThreadPoolTaskExecutor(181) - Initializing ExecutorService &#39;quartzThreadPoolTaskExecutor&#39;</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.i.StdSchedulerFactory(1220) - Using default implementation for ThreadExecutor</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.c.SchedulerSignalerImpl(61) - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.core.QuartzScheduler(229) - Quartz Scheduler v.2.3.2 created.</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.simpl.RAMJobStore(155) - RAMJobStore initialized.</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.core.QuartzScheduler(294) - Scheduler meta-data: Quartz Scheduler (v2.3.2) &#39;quartz-scheduler&#39; with instanceId &#39;NON_CLUSTERED&#39;</span><br><span class="line">  Scheduler class: &#39;org.quartz.core.QuartzScheduler&#39; - running locally.</span><br><span class="line">  NOT STARTED.</span><br><span class="line">  Currently in standby mode.</span><br><span class="line">  Number of jobs executed: 0</span><br><span class="line">  Using thread pool &#39;org.quartz.simpl.SimpleThreadPool&#39; - with 25 threads.</span><br><span class="line">  Using job-store &#39;org.quartz.simpl.RAMJobStore&#39; - which does not support persistence. and is not clustered.</span><br><span class="line"></span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.i.StdSchedulerFactory(1374) - Quartz scheduler &#39;quartz-scheduler&#39; initialized from an externally provided properties instance.</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.i.StdSchedulerFactory(1378) - Quartz scheduler version: 2.3.2</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.core.QuartzScheduler(2293) - JobFactory set to: com.example.demo.config.ScheduleConfig$1@611ffa8d</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.s.s.q.SchedulerFactoryBean(727) - Starting Quartz Scheduler now</span><br><span class="line">2020-09-18 15:54:40 [main] INFO  o.q.core.QuartzScheduler(547) - Scheduler quartz-scheduler_$_NON_CLUSTERED started.</span><br><span class="line">2020-09-18 15:54:40 [quartz-scheduler_Worker-1] INFO  c.e.d.s.QuartzSampleJob(21) - Execute using quartz scheduler!</span><br></pre></td></tr></table></figure>

<h3 id="DisallowConcurrentExecution"><a href="#DisallowConcurrentExecution" class="headerlink" title="DisallowConcurrentExecution"></a>DisallowConcurrentExecution</h3><p>쿼츠 스케줄러에는 스케줄이 동작하고 있는 Job이 수행되고있는 시간이 길어지면 다음에 실행되어야하는 작업과 겹치지 않도록 <code>DisallowConcurrentExecution</code>을 제공합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzSampleJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Scheduler-Clustering"><a href="#Scheduler-Clustering" class="headerlink" title="Scheduler Clustering"></a>Scheduler Clustering</h2><p>스프링 프레임워크 기반의 웹 애플리케이션이 분산 환경에서 동작하는 경우 하나의 인스턴스에서만 스케줄링이 수행되어야하는 요구사항이 있습니다. 쿼츠 스케줄러는 JDBC을 사용하여 스케줄러 동작을 클러스터링할 수 있도록 지원하는 JDBCJobStore를 제공합니다.</p>
<h3 id="JDBCJobStore"><a href="#JDBCJobStore" class="headerlink" title="JDBCJobStore"></a>JDBCJobStore</h3><p><code>JDBCJobStore</code>는 JDBC API를 통해 스케줄러를 관리할 수 있는 기능을 제공합니다. 본 예제에서는 PostgreSQL을 기반으로 설정하도록 하겠습니다.</p>
<p>먼저 <code>postgresql</code> 의존성을 추가합니다.</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.postgresql:postgresql:42.2.16&#x27;</span></span><br></pre></td></tr></table></figure>

<p>그리고 다음과 같이 쿼츠 스케줄러 프로퍼티를 기술합니다.</p>
<figure class="highlight properties"><figcaption><span>quartz.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"><span class="comment"># Configure JobStore</span></span><br><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.quartz.jobStore.misfireThreshold</span> = <span class="string">60000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.quartz.jobStore.class</span> = <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.driverDelegateClass</span> = <span class="string">org.quartz.impl.jdbcjobstore.PostgreSQLDelegate</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.useProperties</span> = <span class="string">false</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.dataSource</span> = <span class="string">quartzDS</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.tablePrefix</span> = <span class="string">QRTZ_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.quartz.jobStore.isClustered</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.clusterCheckinInterval</span> = <span class="string">20000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"><span class="comment"># Configure Datasources</span></span><br><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.quartz.dataSource.quartzDS.driver</span> = <span class="string">org.postgresql.Driver</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.quartzDS.URL</span> = <span class="string">jdbc:postgresql://localhost:5432/quartz</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.quartzDS.user</span> = <span class="string">quartz</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.quartzDS.password</span> = <span class="string">quartz</span></span><br></pre></td></tr></table></figure>

<p>쿼츠 스케줄러에서 사용할 DataSource는 <code>quartzDS</code>이며 PostgreSQL 드라이버를 사용하도록 설정하였습니다. 위 프로퍼티에 기술된 정보대로 PostgreSQL에 데이터베이스를 생성합니다.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> quartz <span class="keyword">WITH</span> ENCRYPTED <span class="keyword">PASSWORD</span> <span class="string">&#x27;quartz&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> quartz;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="keyword">DATABASE</span> quartz <span class="keyword">TO</span> quartz;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_postgres.sql"><code>tables_postgres.sql</code></a>을 실행하여 JDBCJobStore에서 사용할 테이블 스키마를 생성합니다.</p>
<ul>
<li>qrtz_blob_triggers</li>
<li>qrtz_calendars</li>
<li>qrtz_cron_triggers</li>
<li>qrtz_fired_triggers</li>
<li>qrtz_job_details</li>
<li>qrtz_locks</li>
<li>qrtz_paused_trigger_grps</li>
<li>qrtz_scheduler_state</li>
<li>qrtz_simple_triggers</li>
<li>qrtz_simprop_triggers</li>
<li>qrtz_triggers</li>
</ul>
<p>다음과 같이 JobDetail에 대해 <code>storeDurably</code>를 활성화합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzSampleJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;QuartzSampleJob&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">jobDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob().ofType(<span class="keyword">this</span>.getClass())</span><br><span class="line">                .withIdentity(IDENTITY)</span><br><span class="line">                .storeDurably(<span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이제 애플리케이션을 실행하면 쿼츠 스케줄러가 데이터베이스에 저장된 정보에 의해 스케줄링이 실행됩니다.</p>
<hr>
<p>이제 여러분은 스프링 프레임워크 기반의 애플리케이션에서 비동기로 수행되어야하는 로직을 처리할 수 있으며 반복적으로 수행되어야하는 스케줄링을 적용할 수 있게 되었습니다.</p>
]]></content>
      <categories>
        <category>스프링 프레임워크 가이드</category>
      </categories>
      <tags>
        <tag>스프링 프레임워크</tag>
        <tag>스프링 튜토리얼</tag>
      </tags>
  </entry>
</search>
